(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    191533,       3520]
NotebookOptionsPosition[    143486,       2640]
NotebookOutlinePosition[    189763,       3493]
CellTagsIndexPosition[    189720,       3490]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"SetDirectory", "[", 
  RowBox[{"NotebookDirectory", "[", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.913640300762743*^9, 3.9136403079384604`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"801d992a-ff19-474f-82cd-46c4f3cc9276"],

Cell[BoxData["\<\"/home/s2/Documents/Wolfram Mathematica/force_plot\"\>"], \
"Output",
 CellChangeTimes->{
  3.913640308606114*^9, {3.914353749535074*^9, 3.9143537617672377`*^9}, 
   3.914353892036437*^9, {3.9161400647853107`*^9, 3.916140074400401*^9}, 
   3.91614260359027*^9, {3.916222184615573*^9, 3.916222198181422*^9}, 
   3.916222313931213*^9, 3.922184266721086*^9, 3.923738652617757*^9, 
   3.923746672351384*^9, 3.923747405346326*^9, 3.923747984016136*^9, 
   3.923830794802114*^9, 3.924357009847293*^9, 3.92436186022323*^9, {
   3.9244436755414057`*^9, 3.924443696542879*^9}, 3.924444074044079*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"3e974061-8a74-430f-b14e-51b2ead15099"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"raw", " ", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\</media/s2/Archive1/MPM_2023/simulation4/_output/indenter.h5\>\"", 
     ",", "\"\<IndenterTotals\>\""}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.913638803084228*^9, 3.913638840269136*^9}, 
   3.916222303551721*^9, {3.923738642516057*^9, 3.9237386489331083`*^9}, {
   3.92373868702217*^9, 3.923738691120019*^9}, {3.923738728628973*^9, 
   3.9237387375916767`*^9}, {3.923830787853017*^9, 3.923830789848119*^9}, {
   3.92435698525702*^9, 3.92435698823864*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"1d6d3aea-c858-4b86-a3ca-4d1266bbeeaf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"tval", "=", 
   RowBox[{"raw", "\[LeftDoubleBracket]", 
    RowBox[{
     RowBox[{"1", ";;", 
      RowBox[{"-", "1"}]}], ",", "1"}], "\[RightDoubleBracket]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.9136388646331463`*^9, 3.9136388743443527`*^9}, {
   3.913638936796088*^9, 3.913638947687333*^9}, 3.9136390816549273`*^9, {
   3.923738668235836*^9, 3.9237386682805*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"a22424fa-d059-4872-a744-79ddb66826c3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fval", "=", 
   RowBox[{
    RowBox[{"raw", "[", 
     RowBox[{"[", 
      RowBox[{
       RowBox[{"1", ";;", 
        RowBox[{"-", "1"}]}], ",", "5"}], "]"}], "]"}], "/", "1000"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.91363908455648*^9, 3.913639096403482*^9}, {
  3.9136397194776*^9, 3.91363972008996*^9}, {3.923738748297371*^9, 
  3.923738748359182*^9}, {3.923746366972106*^9, 3.923746367106657*^9}, {
  3.923746406141899*^9, 3.9237464164712887`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"fc127fd4-06f6-43c5-8482-5e4f4c926d05"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Max", "[", "fval", "]"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.9161426108040113`*^9, 3.916142616904158*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"3e43b203-93c9-447b-8765-cdb00402c445"],

Cell[BoxData["588.4495082958226`"], "Output",
 CellChangeTimes->{{3.9161426132327414`*^9, 3.916142617182384*^9}, 
   3.916222198324107*^9, 3.916222314104206*^9, 3.9221842670261297`*^9, 
   3.923738752191533*^9, 3.9237466723862753`*^9, 3.9237474054115868`*^9, 
   3.9237479840960283`*^9, 3.923830795295711*^9, 3.924357010087845*^9, 
   3.9243618603177223`*^9, 3.924443696615068*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"cc9e0b46-8aa1-4e03-a5b4-54ba651a55bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"forceplot", "=", 
  RowBox[{"ListLinePlot", "[", 
   RowBox[{
    RowBox[{"Transpose", "[", 
     RowBox[{"{", 
      RowBox[{"tval", ",", "fval"}], "}"}], "]"}], ",", 
    RowBox[{"PlotTheme", "->", "\"\<Detailed\>\""}], ",", 
    RowBox[{"AspectRatio", "->", "0.3"}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "1200"}], ",", 
    RowBox[{"FrameLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Force, kN\>\"", ",", "\"\<\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<Time, s\>\"", ",", "\"\<\>\""}], "}"}]}], "}"}]}], ",", 
    RowBox[{"PlotStyle", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"Thick", ",", "Black"}], "}"}], "}"}]}], ",", 
    RowBox[{"BaseStyle", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"FontSize", "\[Rule]", "25"}], ",", 
       RowBox[{"FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
      "}"}]}], ",", 
    RowBox[{"FrameStyle", "\[Rule]", 
     RowBox[{"Directive", "[", "Black", "]"}]}], ",", 
    RowBox[{"PlotRange", "->", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{
          RowBox[{"tval", "[", 
           RowBox[{"[", 
            RowBox[{"-", "1"}], "]"}], "]"}], "+", "0.1"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1000"}], "}"}]}], "}"}]}], ",", 
    RowBox[{"PlotLegends", "->", "None"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.913639321953857*^9, 3.9136393795171843`*^9}, {
  3.9136397137278223`*^9, 3.913639757032504*^9}, {3.913639892400663*^9, 
  3.9136399417850227`*^9}, {3.9136402461676702`*^9, 3.913640249399412*^9}, {
  3.9161399759144783`*^9, 3.916139976819387*^9}, {3.916140017223624*^9, 
  3.916140047439145*^9}, {3.9162223309401903`*^9, 3.916222331238884*^9}, {
  3.9162224020946093`*^9, 3.9162224069684*^9}, {3.916222624021839*^9, 
  3.916222632436751*^9}, {3.924443857980288*^9, 3.9244438583637*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"491329a2-6083-4179-ae3a-e0367c0409f0"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {GrayLevel[0], PointSize[0.006944444444444445], Thickness[Large], 
     StyleBox[LineBox[CompressedData["
1:eJxcWndYjW/cb+95OpVRKBp2RPgZ94fKiIYVhYyiPU5nn05DVlIiZEcZIZJR
SQnZ2auMBmmn0tDSeJ/7va73n9cfuZ7rOec593OP72d9TbYEr9gqJyMjo6os
I0P/////YvtzfZ6LeMTm7BGR0xR5zBig1zvJQKEcVz+rjxweMDg9IWs/qXzL
Ejlr6kHzf+8fJs83/U0+OqCHk9K66N6k4+T8kcCDhY46GPuPfj6Z8Jy0s/YW
jURpfuq66/UphB/1o1P2lxlG99HvnydqSy/59lpawm/2e/5P5TQy/0rEyQot
G9yQ0OddJl/fxpRsXTAf3bmDCXrmV8kI+d+lgkXzQXro8zPIaBO7oxr6dtA1
NvxsmppJEszEw8Y9dcTqAvp7N0hC6hAJJ3Q5jm+cVDl7yi3Sqf6ie0qBC8pk
7jK/f5uEmxnN2RO6Aiap9i2rHmSRmlbXg8LK1dhqS8eTQ96MsXByb1qDy1Xr
+wKd75BFHmc/YK8bmnbR8eUSbElW32K/DlMseKp7yu8ShSlBjukq68F/Tseb
T7buzovoPeiBXN99BmcD7xHZpTNbbg5sRL+aITP+AmJ/IaN54Y5NmH81dXRu
333yaojsTH/FzSg0p+/zgJx9xblfZOIJr671Q+rtHxJHow0yDzleUHpO3+8h
Wf8k5/OMek9cOlaXzI8vJKtG+QReiPOCgy9930dE8/KOx9u/eeL3LJ6Z3OdH
xPmVUuaxLV7Yr0bf/zH5+fLQ0i8aXrD6Ppi+3+gJGX+udfWdrV74kE7n4wm5
sWhXYAvxAk+6b+pwr6dkTevSV9jmCQNHOj/PyPTE1+xDmz1xx9gwNy39GTn2
p2D/Rq4X3JvpfD0n8lM4Oxyfe6GvIJVMa39O3pARX7ZO2IrkBDp/L8i+oK0K
RdxtwKZJTx/8V0QmpeYMexiyDZVWdD6LSLzrXqcbBT7YKXt3mWP0S5J49UvC
KjdfmH+g8/uKtB+aeKjnoy+ep9p//PriFXmgGnlA96Qv/Lh0vl+Th8P4O2oV
faBh995tm+4b4uSYYvnsoC8y2HT+35B5c3q4rXb+cKle/6Nt7Vty/dNXz/or
AWjLouvxlowbLrrSURQIB1veLeLyjlS+rrm3JtMfJ8fT9XlHlB4HL3Y754vf
enc7FTveEf0vP2eey/HH3D66Xu+J7mB4UvPiYOyvGpz16uh7wtn/5t2lgBBU
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
FNlIsa26VmcmSwnXmm9q97VIoLLAiM8zUkKe5Y91Vxn9fyWZ+ilKyJl5K+f9
RwmW/ds5t8lKCaor82yzl0nQvIb6K0oYlzJ3/t0PYhy43aS4zV4JYdL4rBPz
xZiqS/0WJZQpxzTNJCJ8CnR9U+7G3M+JHTT0EEJQRP0XJfi+2cRS+8Hgv8X9
pDVBSki1XSH/7KoAd3dQP0YJow9M6LQ6LMD6HxYb30Ur4bJBzmB3igADc6g/
owSD7Kdr1Y8z+H/8gMWSo0poja9fquMrwILOx/t2pShh9fDFtzV8BKha0dPy
MF0J/whXbwzz/N3XqX+jBHuZv+lP2hn819hy578HSiC2fx4pTBKiyIf6OUrw
vGNNFkqFCHhSFHXrE/P8TDM/p71CaJlSf0cJNbOt7EbPEiIzwnrJhHolpL17
cp2ziMH/797XfNqVEK1YZXLjOIP/M07pXuhXwqv7McxWY/D/MPV/lGFs5jen
eqIIM1sVvhmzlHEn89PfX9OE+OZI/SBlLKseqarB4K/0SmBqkrkyfi4pm+Q6
isF/ZeoPKWNsuIXq0VABHngW+2nPVsaYn6tDW/cKsOUB9YuUsXP6ePaQZD4U
jIl1jLMyLt+ZkOY2lo+LYuofKSNJ8cnS1a8Y/C9O+yfjpQzRA5Miaw8eGqZS
P0kZ9jeWv/AM4CEuQeexWKSMeyqJk2/t5mHSbzvL7GhlTFQ7Zh13hId3i8Vx
bXHK+Oxw1ESulsH/C9RvUka82/3oX108sOUqV/mnKOPx3YPRa8wZ/Peg/pMy
XN9GF676zsXaPAfjqixlhPYZ9ubVctFrSP0o5v7NP2bPGPw8xbtVvb5IGWcH
018+1+Fh3nvqTykjJHeWtNSMhx8TjTI+lyvDccpctYrRPETHUr9KGfu1zHZN
YPB8TO1OgVO7Mu7+KthUnMfFU1vqXykDdtzbd/u48DnbNO+ZsgpO/re0odKF
B7V+k3PyLBVgiUiofoqHq26uyjBSwWvZjlLpTR6csqm/pcLw48LRZ6fz8Id1
/+0dKxWEuI9olJ5l8D+Y+l0quPuOITNCLqa9sjg2xV4FLuHciusHGPy3pP6X
CpQ27nm4P5/B/10HNl1xU0FEf89UuToG/ysfP67xVMGp37ZbNx1h8H9ej+Xo
IBVUv0hR8LDmwuMk9cdUcEtBTWmXJRcy3ZtbT0arIO3m23O6s7lIXUX9MhXc
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
vY1hfrrORB578Gwdej5KdYhXY0KpUXB53VUZ9GcWhZuWMVGde3q48Ui6/99E
/BoTEcoe6w3ZchQebmtaVcXEH61uH1+6PkMeEs/GxJUHJbqLLsqxtI/vklnH
hHGzi9+3QjnOmBHfxsTC94Prbs6g+38Pj9y6ZiaaUob8vVxA9//biXdj4mxp
xvzFdD91uCBB27iDCeHzwV+jZivx+Q3xb0wMFQheWdPr5enaN0OW9NPjffS6
SnRHgUR74uGYUI/NrRO1KvAmqPPFPjUW/onsbNI4RPf/6cTHsVAc1xdcz6f7
/3LTaY+1WLjk/imk+izd/3+fualVj4XfO9rzvo0Kg8nIFVkaDBaKCrNnJf+k
+//FxM+xUP8P93h2D93/RyWqOQtZEP+3ve/+iTAY5RNPx4K+/rmey/PDsb6+
dH20FQsnxoky/N+Ho3gY8XUs+EwNVXccHAHNqb2Pbtqy8Ex+Os+vMxwrNhBv
x8JxfqvfvVt0/59qOX7Agd7+c7c86iTd/98j/o4FbVNmns31cMz/5pds60Yf
X+uIgyY1dP9PEY/Hgm2bx4oP3Ah0LEjuC/FkISbWa0vYpgg4RBCfx8JupwPN
YrUIHDhb4Z3vx0I2v/mi/+ZwvK0jXo+FXMrtkPOMcFhr/rrdFkiP51rDObYy
HDsmE7/Hwq6e8MYlFhGoCZhgOlrMAuuwuW3HigiYJRPPx8JFv3Ln6S4RkJUG
7FwbwYJ6zy2f+d/CUfE18nrMdhZyOodeEj0JB5Of8eVYAgs2zg+tm+jPQfOJ
92Ph2Bl/+ae0cFwPrVxUn8RCnU19/ojOMAzPJf6Phdm57dtf88Ph81L1CvMo
C0nncpf164Tj/BDiAVkwbBpw+m0Qjj82k1leOSxsbWfmrw0Mx8I1xAfSx/eP
Wl12TCiOHwiOSCpg4dGlnncucXJ0lRAvyELP5v15OutlcGrPelt5nYUVJ52K
JxRLkcwhfpCFWeeNXDcskqJlbrXLsDIWxuwPrwyjr1dbBfGELCTYDyzveixB
fI5G3uwqFobWs1UPzJHgZQ3xhfT4M9RT3F3EMB80fcSOOhaGL9SzadsugnIi
8YYsrG69HpRhKcIj/22i280sDL4/wuvEFBE4+4g/ZKEr5dKMG5kibLp5+r+f
7SxsLouKZtHro1ttxCOyoKKzdu7kbhFGsOqm2fWzEGHk2TI1VgR/V+ITWbgc
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
       "]],
      FontFamily->"Times New Roman",
      FontSize->25]}}, {{}, {}}},
  AspectRatio->0.3,
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 25, FontFamily -> "Times New Roman"},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox[
      TagBox["\"Force, kN\"", HoldForm], TraditionalForm], 
     FormBox[
      TagBox["\"\"", HoldForm], TraditionalForm]}, {
     FormBox[
      TagBox["\"Time, s\"", HoldForm], TraditionalForm], 
     FormBox[
      TagBox["\"\"", HoldForm], TraditionalForm]}},
  FrameStyle->Directive[
    GrayLevel[0]],
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.4, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  ImageSize->1200,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.368417, 0.506779, 0.709798], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.880722, 0.611041, 0.142051], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.560181, 0.691569, 0.194885], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.528488, 0.470624, 0.701351], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.363898, 0.618501, 0.782349], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[1, 0.75, 0], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.647624, 0.37816, 0.614037], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.571589, 0.586483, 0.], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[1.6]]}, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
    "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 9.096400000077818}, {0., 1000.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.913639334726839*^9, {3.913639370187572*^9, 3.913639380215458*^9}, {
   3.913639723074684*^9, 3.9136397601311083`*^9}, {3.913639931395493*^9, 
   3.913639942218554*^9}, 3.913640249978915*^9, 3.914353761914282*^9, 
   3.91435389219748*^9, {3.916140035650638*^9, 3.916140048373973*^9}, 
   3.916222198421268*^9, {3.9162223141686993`*^9, 3.9162223323971043`*^9}, 
   3.916222407649259*^9, 3.916222632762786*^9, 3.9221842671747303`*^9, 
   3.923738755066523*^9, 3.9237463722082987`*^9, 3.923746423299663*^9, {
   3.923746662866259*^9, 3.923746672418667*^9}, 3.9237474054388514`*^9, 
   3.9237479841300793`*^9, 3.9238307953712606`*^9, 3.924357010380838*^9, 
   3.924361860370037*^9, 3.924443696841502*^9, 3.924443858718958*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"becff4db-c91e-4984-bd65-833fe553d150"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<force_plot.png\>\"", ",", "forceplot"}], "]"}]], "Input",
 CellChangeTimes->{{3.916140050484129*^9, 3.916140060568288*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"a3088624-ebb3-4d36-a285-14b06735080e"],

Cell[BoxData["\<\"force_plot.png\"\>"], "Output",
 CellChangeTimes->{3.916140080151132*^9, 3.91622219863244*^9, 
  3.916222314281847*^9, 3.9221842674026947`*^9, 3.9237466726764297`*^9, 
  3.923747405552952*^9, 3.9237479842573566`*^9, 3.923830795650385*^9, 
  3.9243570106555777`*^9, 3.924361860540154*^9, 3.924443697119939*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"0419df98-a238-4023-929b-3cf56d4bd4c7"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"index", "=", "1000"}], ";"}]], "Input",
 CellChangeTimes->{{3.924443764467805*^9, 3.924443773284141*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"c79d891a-09ec-475d-8b89-1bed6763a73e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"forceplot2", "=", 
  RowBox[{"ListLinePlot", "[", 
   RowBox[{
    RowBox[{"Transpose", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"tval", "[", 
        RowBox[{"[", 
         RowBox[{"1", ";;", "index"}], "]"}], "]"}], ",", 
       RowBox[{"fval", "[", 
        RowBox[{"[", 
         RowBox[{"1", ";;", "index"}], "]"}], "]"}]}], "}"}], "]"}], ",", 
    RowBox[{"PlotTheme", "->", "\"\<Detailed\>\""}], ",", 
    RowBox[{"AspectRatio", "->", "0.3"}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "1200"}], ",", 
    RowBox[{"FrameLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Force, kN\>\"", ",", "\"\<\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<Time, s\>\"", ",", "\"\<\>\""}], "}"}]}], "}"}]}], ",", 
    RowBox[{"PlotStyle", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"Thick", ",", "Orange"}], "}"}], "}"}]}], ",", 
    RowBox[{"BaseStyle", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"FontSize", "\[Rule]", "25"}], ",", 
       RowBox[{"FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
      "}"}]}], ",", 
    RowBox[{"FrameStyle", "\[Rule]", 
     RowBox[{"Directive", "[", "Black", "]"}]}], ",", 
    RowBox[{"PlotRange", "->", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{
          RowBox[{"tval", "[", 
           RowBox[{"[", 
            RowBox[{"-", "1"}], "]"}], "]"}], "+", "0.1"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1000"}], "}"}]}], "}"}]}], ",", 
    RowBox[{"PlotLegends", "->", "None"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.924443785643278*^9, 3.924443806752956*^9}, {
  3.924443848834293*^9, 3.92444384917659*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"1f50ca6e-b729-46c9-b90f-2da37568c276"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[1, 0.5, 0], PointSize[0.006944444444444445], Thickness[Large], 
     StyleBox[LineBox[CompressedData["
1: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
W72kcqso/tVJCVKPd5r/mddLgk0U3L2MwtDsSPlXL0lwqHBQGhuGqSpPC+vd
e8nb9NOBF99LwHsymeFjzHhr9T/7PpQgR5K47mNsL+Etcr3OdQrDv1mUn/WS
awYbh5vohYO0eda/yOolav7v0s8kh2NnGuVrvYxef9voJQrHs61zg+9X9ZKe
2rvVxWvDoTqK8rde8q9x7enJN8Pg8F5F6ZpiHzl6TtD9bZYER+Ion+sjorTZ
XydPk6BiSeWJpGl9pLzUScrutgSjpCi/6yOZTW6vX12TYEvutfEJzn1k5ifP
cs4yCS4EUb7XR0aULahxvRuKhokR96Ki+8jStX3TzDxCMbGugeF/feT//L/A
JMcVvPQ+0rv8woKQMxLcXk/5YB/54Dhnjn6bBD1aYys93veRhKUNVd7yYbAs
jmH4YR952TR6rM8FCSJ2dvo5DfSR+zpPfq0VSfBkPuWLf4lJWjTb6rkEit2F
A0tN/pITCrk5c+PDsOI65Y9/iW7v35sphuGI90o8ONfhL4n4GuF2xyUc7wwp
n/xL7A+G5rXVhUH3i+foiaK/ZJfaH7cUZv82HqX88i+5ush+6P2wMJyzm3tD
L/kvaVLV0GDnhaFWgfLNv6TAtPfzz4PhMH2kskij+C9J+Xths5VGBHzFlH/+
JR0n0p/90YzA9RmVZUMdf8leXvWD5KxwdDZbM3z0H8FwwWZpj3DMvnRtW/uo
f+R9p2Lop7pwhLpSfvqP/Pevbwz7WQTydSM6a6z/kTcfj32+uyASsmUNDF/9
R0yF096cc4nE0hjHXe/9/5G8Ro2tszLDccCK8td/pMs3Oeh+tQRv+g3/K0r8
R/zvbpiZEieBdnYMw2f/kUkhTxJaPzD1H9h5KSf/H5l+S6N1zJIwnDaj/PYf
SfO+kr3Dn6n/74UWVxr/kSOH459EsJj6P0357j/yVWrVGlltpv7XJj47xeon
Be2KadXxDP6rU/7bT3bE/hFrP2Dwv8hzQ+y8fqLop350t6UE5pGUDzPPO2UX
5LElCJ4792eYez9pOvmOzD0UivsdyQw/7ie9u2axVw+EYChdJSQwtp8Y+Ym8
XUkIrLZTvtxP0g57Go7oZ+rfoFJla1Y/eTxs97XZUUz9V1gz/Lmf7Fph9GDO
eqb+D107vbqqn8SenM8a3ynGGlvKp/tJY/fwLXPjxDguGzHJWnGALPBVFY68
I8KXBw0Mvx4gsfqerrd6gzFa6Phw1rQBcvXDs6Nhw0Vwn0r59gAxfOPmG79H
hNRGQ3tT5wHy3Pby5ewmEZqTKf8eIObbEzsS9MWYurGzanj0AFHfPHDyYYkI
PB3KxweI9szmhynMeDmvCwNV0gdIa5higWUOg/97KD8fIDfXyPFU6hn8R6JU
/7sBMhghY7frMIP/fYMMXx8gbhZvzw7oifHsluehlv4B0itW7HOYLYaqH+Xv
gyQ3omK07zkRHIznjq02HiSZmwS572sZ/K9KZvj8INGTt/DYeyQYFcdVbpfa
D5KnbfKeg/+CMWoV5feDhDNh+9hENxG2qFRaFQQPklXWVerJ5gz+P7Fm+P4g
kVh5u29NDkaD5Nr72+cHidvIWxekrwox0YLy/0GS7aVQfqxDgMC28O2XXgwS
9qL4oZjZQtxOo3pgkGx9+LXkjFIwerY6did2DJLlM3Rrxu0LhuUoqg+GyFNF
/X21TsGIeG+4d9+oIeIipaIQuUiIJ3FULwyRfe9z3Q7+5UNxaaduiPUQ6X8Y
szM8gY8VUlQ/MO/XutiuqGX4f25hmq//EDFm28w68Jnh/0FUTwyR8FKPCXb3
Gf4/KXHu5sQhcmu+OPycDR8b6wYZfTFE/nx6uH6Iy8O5JM9i+/wh4tTd0VhS
FoTa9VRvDBGL16eH0sqDYMqauxGNQ4S/8W2Z4+0g+BYnM/pjiJxs+5LnsTAI
HxfJd59QksLoL9VXWjSDEJJE9YgUmv82pWTf40Lvn38eS18Kn8rGnNbw5iJv
PdUnUvBS8tyzNowLtzvle2KmS2F/R8Hj0UVcyLCoXpHCgQOucvUvuLjoTxxk
l0jhfULtryhGLy4ppvpFCul6dcf0hgeh0SRNV+IihcHYzZaxjN6L2Un1jBSm
HT3V0reei0nftL51BUhhttmlyDUxXJTMp/pGCvLRZi5m8kHgnBSn+e+Ugk6k
qeHy1CCwu68xekcKKjP7rtTO5uHO6hpO/XEp3BkWcnCsLg9O16n+kcK8oLeY
GhqEXtUVc7dkSOHVpsdqL88H4ZQX1UNSODIwrXXzYh7mP70t/fGRFMb+zDra
k8tDlSHVR1JIFaZcNPLkIzJcr9jxgxRaYlkO+zv5GPvFkdFLUsioHoNRt/ko
nL378IufUgg/mKnla8HHjqNUP0nhq+5i/+MT+FBqb3FZPCiF0l9+3pue8nHV
juopadiM/V1/ZbcAK686Gd1nS2PpQPqIWwzfb1Wg+koaHw1EyY3jhEhwz282
N5WGcZKo2+W2ADMeUb0ljb+TqmXUswR4r2d2J8NSGl2mBfJ/meeFYqq/pKGz
WSZMdEWI4eUJEmNHZvxGgyp9hq/fm0H1mDQ+zdGo23MtGJvi+6yTPKRhVCP/
7djCYAw2T2b0mTRcS637vzcLcX7ZNnVdsTQcswI8vyEYiy9RvSaNJQ7s0I2C
YPyQfvkhPo6ZX8aq54eHBWOPK9VvzO8filokw7xvdt88SSlFGtPV71jGnBWi
WJfqOWnIpkribaSF8OOf2RGVLY2FZocaRo4VQqOM6jtpKK9b8nJxhBA3JstP
/VssjQDXW8sqDYKxOobqPeb+DoW6+anB6Kr37wmqloZ2+t6MysJgJFpR/SeN
gXP8fbd/CTHnfHl+c6c0/oQv1E1/KMTnfhVGD0pDEGo1oLEmGBJnss9DSQaJ
xkWZDyCEQTbVhzI4vO1Q51szAR6x0xy/6sngBolcfOsyH9sCqV6Uwbq5W2MW
MXpe7pXWCKfpMnB2aTr86jsPl82ofpRBsUJn5WxvPpbtFn8vsZGB1+X3hnx/
AZq+X2P0pAyO7vxc3WAoROzCmitLXWQwfmwHK+mmEFNOU30pgzUfDP9c/y1A
aY9t0KMAGUjid6Z62fIRtJbqTeZ917axotc86Ny8PW/uThlkj9zG+xTDR7Y6
1Z8ykB6pk1xhJMAGHz3ZW8dl4DnC6tAlRt/+LaJ6VAb8KZKaVasFOGO0++WE
DBmMNEmXPbVUgIWRVJ/KwKVuR1ymvQDfKluOXHgkgwrJlImqw4SInkv1qgw6
Gk7Fep4RYFyi0ya9DzJwVDzbu+AwH0UdMYx+lcGEeJ1l5Uw9eDnkjzv2k7k+
OZ316CUPKhlUz8ogrM9AfukBHjKUzFrUB2WQ5z12P0J5sN9O9a0sXOa6bLzS
zcPvxwlZe9iycPQ+v6qlmofDBlTvyiKNz/Ky0OFjZmhf2JCJLH77GEtf/M1D
eQXVv7LYbvA1TKqTB9HMbUtElrL4+k0rJYXppyMPUT0si+nHbpy/UcvDg5Zi
jXYHWdhdePTfIFPPrrZUH8tCcDa/wXmaAFKp5hXeHrLIsv+05EGsACmyVC/L
YkFw0XrFBAGs3c6cqxHJQuP0fJPMZQLUP6D6WRayc0ynnXQUYN8Iea+NcbJQ
MNu3+LCsEBOEVE/LwiSHf9EzV4hXb/2nvU9m7gctOZXM4FHAVKqvZXE+c8HV
hBHB0Iot712ZLYuKHw9O/NANxq1GFUZvy6L5whepIx1CrLUhj58WyyJW2L+8
LjQY3clUf8viQMLg5jI7EU4Mpu5fWC2LVWb7romUxJi3kepxWVRKOXydcUSM
yhyt1TmdskjNXGQ7pkGMcB2qz2Wx5lquRHJCjDFc8chpSnIQ7HHL6j8jQsFr
qtflEHtq1uqRWSJ4TKipSdOTg+yq2Yq24WIo7KX6XQ6rFt6Mv+EvRlqtbbrh
dDnox7VuX+8nhi2onpcDa+0V0z/M9a8zt3mnbORguW+xzxgixsG+Bkbfy2FN
vO+uC2FiTHPSm6/tIofns1K2+G8KwdtbVO/L4Yjpv1Nlf0PA19wtFxsgh5YR
uR0ZK0MxzI/qfzm8lonYtdI8FHeft7yS2ymHFw/CrYqHhcLFmPoBclh2qe0z
1yoU/VFOx8KOy6EmJ57YMXoyqSqmLzdZDlt+2Q9TWBMGWOZv7k6Xw0xRiver
ceGoOU79AjkU5ax9Xn8sHLu6TE0CH8nhuHfrivNvwmGyivoHckiU3TRiwZFw
PL+W0NrwXg5bta5oFgVEwEeF+gly8Ft0+VSXQyTUPPuy3X7KwcfSz2hBQSQy
n1B/QQ7LDccHje2IhOOYbRGfBuQw8diFvNrrkeiQUL9BHhomNSNUxZE4+ql4
6Wq2PGaxFISB7yNhYUH9B3mMv1UU9OZQFD4eNtd6aSIPu7W5dypY0Qhp8+Qr
TpdH9pSS4yfco6G38sxHK0t5PH0T+uZZWRTy0qg/IY+8Fm+L5JeRcJOXT37g
IA92ds52hTWRkNlG/Qp5cLft2+G9NxIX8/y9Z3nIY8cEeaeo9kgsGUX9C3m8
WrToXBYnCo3B5dMzRfLMfvq1teyNQsx76mfIY/Tkfw49M6IwaTr5axInD37m
+SeTVKNQEkf9DXncr9h8P8w6Cpym1IJzyfIoWBw7Yf7VKLCXUr9DHk8Kd91M
q4jCnQtaB4Zny+PwZEdjw01RcJKi/oc8Wvw1eoruRqJ3k3jNoWJ5XD/jcevQ
nwicyqV+iDz6b1bKrHsUjvnDakapVMtDZmuZIK4kHFVB1B+Rh2NfW+Od6+GI
fGP7I7pTHtt3fY13XhaOsZOoXyKPDa+Sbm59HYbCfbcz/ikqoDrNfbDYQoId
dQ1ac9gKuNZ6S7O/LQRKi/UEfD0F3Df7tjGD0f9Xk6ifooCcObdzyt6FYOW/
XQtapilAec19q+yVIWhdT/0VBUxIXrDo3lsxEu60yO+wUUCoJC7r1CIxZrCo
36KAr4r7WuYQEd77O5VUOTP3c2KGdF2DISym/osCvEvc2CrfGPw3zU9cH6CA
FKvVss8yhLi3k/oxCjBKmNQ97agQm76ZbimNVsCVYTlDvclCDM6n/owChmUX
bVA9yeD/yQTT5ccV0B73c4WWtxCLuwsP7E5WwLpRy+6oeQnxY3Vf2+N0Bfwj
PO1xzPh7rlP/RgE2Un/Sn3Yy+K+27e68RwogVr+fyE0JRrEX9XMU4H7XnCyR
BMPvaXHk7ffM+DeMfez3B0NjLPV3FFBvOc3aaG4wboSbL5/0UwGppU+vc5cy
+P/F85pXpwKi5X8Y3jzJ4P/sM6xLAwp4lb+POWoM/h+l/o8i9I195tdNFmFO
u9xnfbYi7t54/6d2ZjA+21E/SBEr60YrqzH4K7nqn5Jooojvy79OcRrD4L8i
9YcUMT7MVPl4kBCP3Mt9NC0VMe77uqD2/UJse0T9IkXsmjVRZ3iSAHL6xHyf
gyKu3J2U6jxegMti6h8pIlH+6Yp1rxj8L0/9J+WhCNEjw2JzVz6aZlA/SRE2
N1e9cPfjIzZeq1AsUsRDpcNTb+/hY8ova7PsaEVMVjlhHnuMj9Jl4tiOWEV8
sD1uKNPA4P8l6jcpIs45P7q2hw8dmZq1vsmKKLx3KHq9CYP/rtR/UoTTm+iC
tV942HDfVv9HliKC+nX/3m/g4a8u9aOY+7d+Gz9j8PMM/3bdpmJFnB9Kf/lc
i4+FZdSfUgQnd66k0piPb5P1Mj9UKcJu+gKVaiM+omOoX6WIgxrGuycxeD6u
YZfQvlMR92rz3Mrv81BkRf0rRcCad+dePw9e51sWPlNUwul5K5pqHPlQGTC8
IMtWApaLglXP8JHh7KQIPSW8lu6qlNziwz6b+ltKDD8uMDo/i4/f7Pw3d6cp
geNi0Cw5z+B/IPW7lHCvlCEzwTzMfGV6YrqNEhzDeNXXExj8N6P+lxIUtux9
fPABg/+7E9yuOishfKBvhkwjg/81hYX17ko488tqu9sxBv8X9pkZBSih7kWy
nKs5D66nqT+mhNtyKgq7zXiQ6t3afjpaCam33lxgWfKQspb6ZUq4Y37UaNFq
HqxvFufqHFdC5zOFObvn8lCvTv0zJVxbNinZbiQP+3zMo+PSlZBy6vzOB6VB
mPCM+mlKUBavLrbdH4RXRmdsFR4p4fEIcbrgThACIqm/poQsjRbN1cx8tL7K
aUe8Z8ZbNDXlAvN9t+ZSv00J/0bc44lrg7A20f9LTyPzPdFno93ruOjuSCYz
O5XgLrNQ9qozFyccyi9wBpSgsc1lZ85ULuZlUD9OGc+X5eweuYuLSiXi95Ol
jMRJfhun13IRvp36c8qIfNBY0jclCGMKUmduM1GGe4CXb9dfLgoMqF+njI7Y
TqMrB7jwCNUa+DxPGWQoJuv+TC4UPlpv1bVRRtvKdVuT13CRNlP8dI2DMs62
Dt31KeDC9hD185Rx37v3soJGEH61fI975a4M7+k5QfG/uThoS/09ZdwWrrxa
SLiYlmrrZCNSxheXB62Vhhy8laV+nzKW1Xo8DLgRCL7bbYO8WGUYX94aK6/K
wbCH1P9TZviBeOQXWw7ujtBrsEhWhta1utVq6zhwEVI/UBmHfIttrO4Gov/t
ruvXs5Th0r1WQfGUP5KmUn9QGT8LmyN0//kCsS3BZsXK+BsQUnpvmR9qGg0r
Pd4rw17Rd177Y3/ssnFCcpUyHmCEJFsxECYp1D9URmOy3ZOI6gA8H8xTGtnJ
PO/xeaXiKn/4bKR+ojJ6pUffu+jrC7W7pmWHFVUgUzZ5s+paH2TqUH9RBWKF
yGcBP33gyE04qaqngr913c2/jf3Q8Zr6jSqYeK5/efQYPxyd0Ld11zQVTFvw
zDks3wcWe6n/qALrS5bC3cbe+Fi7dcKAtQqCT/1brMT2QgioH6kC8zBjaZG9
F/TOFncInFWwYL2DoeY1b+T1DTrdclfB7gKDSFamD9yczO+3+qvg7DgfQcIF
H8jcpn6lCkx31hSPm++Di5pndnpGq2BD+5kFX757Y4kf9S9VUNJ4afirFT5o
fC638luiCpxfpFoH3/RFjDH1M1XQHZK/b5GPHyZF++s4p6vA8NPhv9OV/VBS
lSw6lqUC5s9R9klfcCzLK8vyVaCkU900qt0H7BPU72TG99BUk1bxwZ2uhZds
36vgs7HDpzVnfeC0ivqfKkgSWRqYTPBD77VU/yeNKri3UN1s3JAfTqlQP1QF
sT/dr8hs88d8Ty2L+QMqsG2yTZ1X6I+qJ9QfVUW++sTLlnx/RI4RD95hqeLN
px+XT63zx9gw6peq4kRocrg6PwCFn74XTTZRxb73sq2O2YHYYUH9U1XYHG4+
XTmNA6UjtvGX56li/p/XVnIbOLjaFt5ZY60Kt6xlRibVgVi58vb60Q6qKLae
23d6YiBa06i/qoro15e+uXgFIkFeb8wJd1XUrVCtb17MwYxt1G9VxY5V/w3f
k8nB+7xdjVoiVXQXXOu2NOVCOIr6r6qQLlm9KW8KF8NFLTf2x6oiuJjbZniM
g3vvqR+rCr05GbpP73KwabqTWCZZFXy2ftmOuVwMxlF/VhW2Xfu1m0o4ON+U
tyg0SxUDejtebRRxsHgp9WtVkXqNM9YwkIMfF0xVul6o4q3NcOvbjhzskaL+
rSp+ZXWN1N8VCLPNCW/9qlRh1j7vrp0wEMW51M9VxZPxQ1t3mnHgN6zvVF2H
Ki7nPv15aCsHGjzq76pi/wL7YJsLHNx4s9XdVVENNwau67DOcLB6EvV71bAu
zEvzgAcHXfuKJ1aMUsP6riNJaos4SKwbjNc2UcPwr3G/JiZwMGexeZfDNDVk
K6pOakrj4HMS9YPV8DPK6YLiXw4k/04/eG6thuVbnpx+Mp4Lgw3UH1aDWeJ2
l5RuDh7dkdu9yFkNrpvkzfzjOdjGon6xGhRf3dqfyowvF+Bvd89fDeUPDF6o
dnFwuZj6x8z1iXu90fO5WGZa/p95tBquqVl3vTzORdNO6ieroWNmqOucy1zE
fltYlZ6ohjHVFcJny7iYsoD6y2p47a1vYjSci9KTqZfHpathlqweO2EfF0Hd
X1S2Zqnh8p3afM3pQdBZoxV4Nl8Nh+cXi9++DUL2deo/q+F3upkwyorBfzXx
7GHv1bBn5tnucWDw34v60WoYYnkY9jJ4dObp96GDjWr42io4/bA6CAvHUn9a
DftMjL/MdufhW7jtc8UBNaxo3M/LOMJD9JfwSdaK6uA1jtItesHg/5zbCZEs
ddxMRpSojsH/o9S/VofKpbwrdy8z+N8+yrnPWB1nfBpyNSSM/renfrY6xvfO
S+Yz/CHj6i7DoHnqmPbLpr/emsF/Repvq8MzrftHbiqD/+4tP5vs1XFpZJK0
whU+Dj+ifrc6voc2PzX6x+C/PtOu3NVRFphzOieGwX8x9b/Vcco1Yxx7AYP/
5XkhlcHMfHc6rwtmvnekOfXD1XHCrdKaxQ/Cg3hTq3Wx6lhqMaq1b2IQXH9t
TD2UqA5H96MPuqq4kFqeoFpyXh1eAbMs123iIuUS9cvVYc/VeKA3jAtrmb53
S7LUoX7n7nJjbS7qXal/ro76u9lhYxj82Xd/65n8F+rQeLK3qkOBgwnDqZ+u
jrxcW/35qzh4xS/2mFOljgVzsn3LV3MQUEb9dXX4zG9OnurKgdYU88k3O9Qx
Svuurd1pDm7FUL9dHd4H3iZrMudrbcPpP+MVNRDjuUQSc4zBfyvqv2vA/Gfw
h45PDP6fl8tLGaUBZf0JWUYfGPwfmDO22lgDYyu4RQ8PMvjv7L9n1DQNFDju
qs9hzmd4NvXnNVDo5JuoJ8vgv3a5/VFrDWT8imwlwiAUBFK/XgPC823rFBuC
4PFqoa66swYGieD1Nx0eFMZT/14Ds4rVDdO/ByFtd2r1bn8NVEzw+69GEgTb
mi9WBcEaiNSc05O9g8H/hVppg1EamB/9cYx3ZBAOnqb+vgZKJdwLhk8Y/O8V
cYITme/zzWmQCeHi7Vrq92uA7ch/UyLhgn/z+5zfV5nnpW7eyP7D4L8G9f81
0BSl+G7TOwb/fWylvfM1MK79WN0Zcy5cntE8QAOKCwa13t3lot/o9ovv7zTg
NePcaZsuLpIiaT6ggd4Ch1UT/3GBr6MOuzRqYE2pp0HeLS5q5tK8QAPD3nY2
/lzPxa7EXS7v+jWgMA4nd97gwqTzbp6moibkvxpqTGXO13OHlrErWZr4Nulh
uU5JEHwyaJ6gieNTOKUqUjyoKTs1FxprwjCgLdSoLgiZ22m+oIlhc1TGqWQH
wbEg7/aCeZr4I3XMcfrvIHQY0LxBE397csv3ZfJwNNRUkm2viens5yMEDF+2
+LjxW8cGTXy0uXXOwJ+PjzMTrKe6ayLUWEe3P52PkEM0j9CE8+9+O7ObfOi1
9qqlBWsi/Kj3xz9OfOTZ0nxCE82ui5dk7+fDLXXrhzGxmujmykfVEgFk5Ghe
oQn1onKpM0UCXHQrPnvyvCZufjzcbT1TiCUPaX6hCRPNIP2DIiEaR5jvYGdp
wm1jn3nOCiFihDTP0MQ9o6hvv6cKMend6SkHXmjCSjxK9muqECVTab6hiV5O
5Yj9nsHgxMr1yFZpYs/sZKmJqiKwf87ZiEZNPLnXw2IACXds/PMlHZp4M6/7
es06EZxSaP6hCd3ZIvMPzPOSoaYnIbJamPPlk/bdCSK8nkzzEC3oWv1Yoy8R
wWDTaLMcdS2ocoO8DVliBMbQfEQL++4J3Vfmi/Ho7prYTl0t7D/6MEVXKQSs
BpqXaMG9vdxO7asY2/7b93vqWC18LbnlmXdSjNtWND/RgiA0q00nWQy5oAdr
/SZpwVyQ4S69VYR152meogXWJoPHBV7BuFzy+26ahRYGWUeHLqkEo6dfpbnI
UgvS943ThLsFWDbRWL8OzPzCxiWFXA3CSWeatzD3Z9ueDnNl8GSvc5ThCi30
zf+9xu8+F5bZNH/RwouDlrLvGL4d+yOubvM6LSwIKFs5spOLr2yax2ghML1q
46jrDN4sKlh+aosW6pbu/NgSyUVEIM1ntPBohvnGXQ8Z/Dnbfa3cWwvacQpv
bhkHwfAVzWu0cC3DeHvGhiAE/Z3A1uZr4Zt2bkLogSA8MaP5jRbMRlwpqHFh
8Gn9FqFDuBZulw6d3WYahO27aZ7DrM/xb429hgxe3T7y+cA+LUiFVJf6JgVB
sYbmO1roMhmfGjKfwS+t5wufH9ZCavmXQxtFPFxZSPMe5n1O17KSgwye+fWn
yJ3VwkJWue/AZh5WnKb5jxaqtQOXz5jKw5kX0xQXpWrB+Fz9lxWJPLT02M7d
kqGFcVdepPZOZvSuyXbfsJtaUPR4Gzn9Dh/xa2k+pIXl8R9SDikI8C365Jvc
+1rYkd605upiAabfpHkRsx+HH6x8ay1AdPVr8+6nWvjYt/7FFTMB3qnT/EgL
JTOGB49PEGDcfJkTM0qZ9V/rbb1ZRgiBD82TtBBfk1Mv7SxE0QmL/oDPWjj8
wdeysEII3Wc0X9JC/8q0cTNLhPD64+OW/kML+kmf+mdLhMg1onkTc/6+ZC9/
7i2EyupzhQ2tWhjOfWw5uVyIjZE0f9JCjaPy3nPmwcjIfGc2rk8LN6ZnyLpe
DcZAJc2jtDClpWK+6b9g2KsqxbnJsrBF2HSuIyoY5+bSfIqFY3LZH/oOC/Db
c377GXUWMq74zBJ84mNRIs2rWOgvvl67SVeAw4WcdZ90mftRV9m6zHVtR8ze
Hj0WAj9N7Trcz8dMw0u5/41lYe76qIjrmXzsdqB5FguzbHJ8Pdz5KA/7pL96
EgvfnjnsYXvzYZpB8y0W9Jf53tpQxIfos3r0QQsWOA+zXlpMFuCFEs27WKhe
KyYdEgFGzl5cXwwWaj12brRj5uu7neZfLOSNNyT+TgI8OCK0VVzBgtmGriuu
0gKoF9A8jIVzGc8m75glgOvvq5lW61hQGLg1u+K2ANcNaD7GwtZJEy0VOgWQ
sqtmR25hoSxv3bOE6QKsCqV5GTOfZ+ecv87lI+WKdvADbxazT9Lv/3vFQ2cF
zc9YcDNSPrmmhAdrhWVfennM9/WTuwlhfBybSfM0FpTvicssZwpQv01CZoWz
ILbLrK3/KMDsQzRfY2Fol0rlujFC7Mu/cYG7jwUH245Fv/4I8Kml+EN8HAve
Q2n5YQMCTNCrU8w8zMIZ+41yVVlChNrS/I0F87TBJ3uzgvFKNMKv6QwLTcVq
Iw7tEkE/leZxLEz7cG9KSLkIAR/sSk1SWThEbMwlamLky9J8jgX/nurjf+aK
oTUjeqb7TRYMDGxPl58QY6sbzetYyJc32GR1KAS3DmafOHefBZXM48e9fEMh
+5DmdyzoXXzeo68hwdrmpv4vT1nY4M+e4fNQgksjaJ7HQs+oJhWLXxJ0Lx29
dXgpC9dnvKpR9ZZgqZDmeyzwv7J3r4yX4MTFNU/XfmZhpZzV6ltTwvDzLc37
WIi+MzHajxeGedL7xh/6wezX76zzq/eF4cBUmv+xELa4SGORQhgqNz+Ie93K
QsWU8EHWKgkmx9I8kIXkhid/l52TIPze73blPua+7yUUXw7Dm0aaD7IQ7q6T
J54fjjG6xk5LZNkwXVQyX1QWBq4NzQvZiDgZl3twThgKeM73otXZ6L/oUmHR
LIF2Cs0P2fBzWJV65JgEHqVxBvm6bHx5/CzEekMYsgZTHb/qsVG23M35yLJw
KEwuiP5nyMbrsuejntiGY/1Gmi+y8ca46ca/hDCk7e+unz2JDX/fdhjwJOjL
oXkjGyvXXJwmyAqFbf2EFXwLNoRfwmsetYbitA7NH9no8fhdpPtFgl+Lt1y/
ATY2u9n7L4oKwwIuzSPZeHXJfqbkVhgOnjui3WLLRoPwso3y2jBUv6b5JBsl
Gy6eXS4fhmn9z4LHr2Mjlb277e+XUERNoHklGz8dFtklvw7B2w39X7ZvYebz
a9KsUvsQGO2l+SUbxdkPJ2x6IwY/axpSvNlYLu2ywHSPGE9raZ7JzC9Gx9Hc
Woxh7O0Xq3hsPA96Mct5uRieoPkms37Fep5LmfN2N+Ck0qhwNlw/vzsuNyoE
ymdp3smG9SSNH7zgELi8fO23fh+z/vHbdr2qEiO9ryFJEMfG0LU/YxfqiNFv
KlN25DAbARP53fxcEeycaB7KPH+hqShvpwhJuyxmlZ5ho0/N0vS7phhtt2g+
ykb7/iN2Vs/EwHefk2qpzHwcfa+ueyDGIU2al7LRFrTsFWkXoWbBuYFlN9kI
ycx9wJolgrkfzU/ZcN7s0KHZFoxdp95t3X2fjajt7n1Bo0T48JzmqWzo9H7m
nr0vgkmPYtHjp2xMr/DVzdwmRrAxzVfZuKjS2e39Qozna+ZPGHzD7O+oziTV
ajFGRNO8lQ2p+U6J7CQxfG5wDs77zIZn+8vqA8Fi3K+i+SuznxOOLdpuGwI1
9Usdwh/M93hnDVvsEorNljSPZUNXWua42gwJMr0/Od1uZQOr7/+Ti5Vg6DjN
Z9kYcfrSGn07CRyL1O+39bJxx+T011UNoUjuMm1RH2TGaz4eMexTKDrGLh49
SVYbcZZmJ8bekMBqFc1vtcEZe9HtSGEYjkYId3qpa8PKVGd0THEY6q7RPFcb
bPZ1fXlOGCwqrzZc1NVG+rjvczQCJNirQvNdbcTmPY8udgvFxznVK74baqOG
M09g+yIU4z1p3quNd+sNr88/LkHIMe0b+pO0ca51f31hjQQvn9D8Vxu3NyUG
VAok0OtYquNioY2uPPdb+vdC4T+G5sHa6NX5W8BSCUWevUSUCG3snBAv/6Eh
BJphNB/Wxnct99Xpt0Lhln6j8q2tNha76DzZ7SLBzU80L9bGlZTxwZZdoZBR
qoPmOm0Y//rgbmEfijUWND/Whoopu3PTmxBc9BhxacUWbWzY6fxz64QQ/DlM
82RtPDLZMPXO2hAseWynvM9bGzrRyw4OXQ3B8TZPy8sB2vD86ObUnxyCRv1o
/0KeNjryT97MuRCCuStp3qyNUy9uySxbHYKYkOwyqXBtXMgsS3s+JQRf0mj+
zLxvsu1u1v4QTKpomrVgnzZCrvAvR5uFIkye5tHaSFlo8/c7M98S89GnxIe1
MWr8XVhvCcHobTSf1sbDuKl32bvF4CSsGcw6o42PvNfuxedEeJxH82ptfPY6
8DN0VTDYLXu3dVzWhuMzvZdRVsFwH0Xza23Y1/y976/O8PPlD4qm3NRGz1ep
A2DOu7yI5tnayNhcMR6dDF+//HuC731t/I5Tvf3whAip72m+zazn+9NZ841E
6JUxjk99qo2xy+vvmi0XYfl0mndrI7n97ryHy8Q4tcW5s/aNNioLzfVDmf7T
HEfzb23UNR3xKo8PwfwHcevHfNYGL8WZk2QTgrgmmodrI6pWbt9U3RBUDS+4
v+mHNpQ/TtUb/1CMqUtpPs6s94/AMVbDQhAp6B59slUbdmOPPnhzPgRlF2he
ro0Dsx1WnakPwdi3E3Z96NXG4HcV/q+jIfgfrsagEA==
       "]],
      FontFamily->"Times New Roman",
      FontSize->25]}}, {{}, {}}},
  AspectRatio->0.3,
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 25, FontFamily -> "Times New Roman"},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox[
      TagBox["\"Force, kN\"", HoldForm], TraditionalForm], 
     FormBox[
      TagBox["\"\"", HoldForm], TraditionalForm]}, {
     FormBox[
      TagBox["\"Time, s\"", HoldForm], TraditionalForm], 
     FormBox[
      TagBox["\"\"", HoldForm], TraditionalForm]}},
  FrameStyle->Directive[
    GrayLevel[0]],
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.4, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  ImageSize->1200,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.368417, 0.506779, 0.709798], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.880722, 0.611041, 0.142051], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.560181, 0.691569, 0.194885], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.528488, 0.470624, 0.701351], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.363898, 0.618501, 0.782349], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[1, 0.75, 0], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.647624, 0.37816, 0.614037], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.571589, 0.586483, 0.], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[1.6]]}, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
    "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 9.096400000077818}, {0., 1000.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.924443807792448*^9, 3.924443849579947*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"b8a71ec2-2b64-4de2-ac41-cd04d6ba96aa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"resultplot", "=", 
  RowBox[{"Show", "[", 
   RowBox[{"forceplot", ",", "forceplot2"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.924443813040283*^9, 3.924443824879373*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"e775d568-5e39-49a7-8b47-ace92f6b2d43"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{{}, {{{}, {}, {
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[0.006944444444444445], 
          AbsoluteThickness[1.6], FontSize -> 25, FontFamily -> 
          "Times New Roman", 
          Thickness[Large], 
          GrayLevel[0]], 
         LineBox[CompressedData["
1:eJxcWndYjW/cb+95OpVRKBp2RPgZ94fKiIYVhYyiPU5nn05DVlIiZEcZIZJR
SQnZ2auMBmmn0tDSeJ/7va73n9cfuZ7rOec593OP72d9TbYEr9gqJyMjo6os
I0P/////YvtzfZ6LeMTm7BGR0xR5zBig1zvJQKEcVz+rjxweMDg9IWs/qXzL
Ejlr6kHzf+8fJs83/U0+OqCHk9K66N6k4+T8kcCDhY46GPuPfj6Z8Jy0s/YW
jURpfuq66/UphB/1o1P2lxlG99HvnydqSy/59lpawm/2e/5P5TQy/0rEyQot
G9yQ0OddJl/fxpRsXTAf3bmDCXrmV8kI+d+lgkXzQXro8zPIaBO7oxr6dtA1
NvxsmppJEszEw8Y9dcTqAvp7N0hC6hAJJ3Q5jm+cVDl7yi3Sqf6ie0qBC8pk
7jK/f5uEmxnN2RO6Aiap9i2rHmSRmlbXg8LK1dhqS8eTQ96MsXByb1qDy1Xr
+wKd75BFHmc/YK8bmnbR8eUSbElW32K/DlMseKp7yu8ShSlBjukq68F/Tseb
T7buzovoPeiBXN99BmcD7xHZpTNbbg5sRL+aITP+AmJ/IaN54Y5NmH81dXRu
333yaojsTH/FzSg0p+/zgJx9xblfZOIJr671Q+rtHxJHow0yDzleUHpO3+8h
Wf8k5/OMek9cOlaXzI8vJKtG+QReiPOCgy9930dE8/KOx9u/eeL3LJ6Z3OdH
xPmVUuaxLV7Yr0bf/zH5+fLQ0i8aXrD6Ppi+3+gJGX+udfWdrV74kE7n4wm5
sWhXYAvxAk+6b+pwr6dkTevSV9jmCQNHOj/PyPTE1+xDmz1xx9gwNy39GTn2
p2D/Rq4X3JvpfD0n8lM4Oxyfe6GvIJVMa39O3pARX7ZO2IrkBDp/L8i+oK0K
RdxtwKZJTx/8V0QmpeYMexiyDZVWdD6LSLzrXqcbBT7YKXt3mWP0S5J49UvC
KjdfmH+g8/uKtB+aeKjnoy+ep9p//PriFXmgGnlA96Qv/Lh0vl+Th8P4O2oV
faBh995tm+4b4uSYYvnsoC8y2HT+35B5c3q4rXb+cKle/6Nt7Vty/dNXz/or
AWjLouvxlowbLrrSURQIB1veLeLyjlS+rrm3JtMfJ8fT9XlHlB4HL3Y754vf
enc7FTveEf0vP2eey/HH3D66Xu+J7mB4UvPiYOyvGpz16uh7wtn/5t2lgBBU
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
FNlIsa26VmcmSwnXmm9q97VIoLLAiM8zUkKe5Y91Vxn9fyWZ+ilKyJl5K+f9
RwmW/ds5t8lKCaor82yzl0nQvIb6K0oYlzJ3/t0PYhy43aS4zV4JYdL4rBPz
xZiqS/0WJZQpxzTNJCJ8CnR9U+7G3M+JHTT0EEJQRP0XJfi+2cRS+8Hgv8X9
pDVBSki1XSH/7KoAd3dQP0YJow9M6LQ6LMD6HxYb30Ur4bJBzmB3igADc6g/
owSD7Kdr1Y8z+H/8gMWSo0poja9fquMrwILOx/t2pShh9fDFtzV8BKha0dPy
MF0J/whXbwzz/N3XqX+jBHuZv+lP2hn819hy578HSiC2fx4pTBKiyIf6OUrw
vGNNFkqFCHhSFHXrE/P8TDM/p71CaJlSf0cJNbOt7EbPEiIzwnrJhHolpL17
cp2ziMH/797XfNqVEK1YZXLjOIP/M07pXuhXwqv7McxWY/D/MPV/lGFs5jen
eqIIM1sVvhmzlHEn89PfX9OE+OZI/SBlLKseqarB4K/0SmBqkrkyfi4pm+Q6
isF/ZeoPKWNsuIXq0VABHngW+2nPVsaYn6tDW/cKsOUB9YuUsXP6ePaQZD4U
jIl1jLMyLt+ZkOY2lo+LYuofKSNJ8cnS1a8Y/C9O+yfjpQzRA5Miaw8eGqZS
P0kZ9jeWv/AM4CEuQeexWKSMeyqJk2/t5mHSbzvL7GhlTFQ7Zh13hId3i8Vx
bXHK+Oxw1ESulsH/C9RvUka82/3oX108sOUqV/mnKOPx3YPRa8wZ/Peg/pMy
XN9GF676zsXaPAfjqixlhPYZ9ubVctFrSP0o5v7NP2bPGPw8xbtVvb5IGWcH
018+1+Fh3nvqTykjJHeWtNSMhx8TjTI+lyvDccpctYrRPETHUr9KGfu1zHZN
YPB8TO1OgVO7Mu7+KthUnMfFU1vqXykDdtzbd/u48DnbNO+ZsgpO/re0odKF
B7V+k3PyLBVgiUiofoqHq26uyjBSwWvZjlLpTR6csqm/pcLw48LRZ6fz8Id1
/+0dKxWEuI9olJ5l8D+Y+l0quPuOITNCLqa9sjg2xV4FLuHciusHGPy3pP6X
CpQ27nm4P5/B/10HNl1xU0FEf89UuToG/ysfP67xVMGp37ZbNx1h8H9ej+Xo
IBVUv0hR8LDmwuMk9cdUcEtBTWmXJRcy3ZtbT0arIO3m23O6s7lIXUX9MhXc
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
vY1hfrrORB578Gwdej5KdYhXY0KpUXB53VUZ9GcWhZuWMVGde3q48Ui6/99E
/BoTEcoe6w3ZchQebmtaVcXEH61uH1+6PkMeEs/GxJUHJbqLLsqxtI/vklnH
hHGzi9+3QjnOmBHfxsTC94Prbs6g+38Pj9y6ZiaaUob8vVxA9//biXdj4mxp
xvzFdD91uCBB27iDCeHzwV+jZivx+Q3xb0wMFQheWdPr5enaN0OW9NPjffS6
SnRHgUR74uGYUI/NrRO1KvAmqPPFPjUW/onsbNI4RPf/6cTHsVAc1xdcz6f7
/3LTaY+1WLjk/imk+izd/3+fualVj4XfO9rzvo0Kg8nIFVkaDBaKCrNnJf+k
+//FxM+xUP8P93h2D93/RyWqOQtZEP+3ve/+iTAY5RNPx4K+/rmey/PDsb6+
dH20FQsnxoky/N+Ho3gY8XUs+EwNVXccHAHNqb2Pbtqy8Ex+Os+vMxwrNhBv
x8JxfqvfvVt0/59qOX7Agd7+c7c86iTd/98j/o4FbVNmns31cMz/5pds60Yf
X+uIgyY1dP9PEY/Hgm2bx4oP3Ah0LEjuC/FkISbWa0vYpgg4RBCfx8JupwPN
YrUIHDhb4Z3vx0I2v/mi/+ZwvK0jXo+FXMrtkPOMcFhr/rrdFkiP51rDObYy
HDsmE7/Hwq6e8MYlFhGoCZhgOlrMAuuwuW3HigiYJRPPx8JFv3Ln6S4RkJUG
7FwbwYJ6zy2f+d/CUfE18nrMdhZyOodeEj0JB5Of8eVYAgs2zg+tm+jPQfOJ
92Ph2Bl/+ae0cFwPrVxUn8RCnU19/ojOMAzPJf6Phdm57dtf88Ph81L1CvMo
C0nncpf164Tj/BDiAVkwbBpw+m0Qjj82k1leOSxsbWfmrw0Mx8I1xAfSx/eP
Wl12TCiOHwiOSCpg4dGlnncucXJ0lRAvyELP5v15OutlcGrPelt5nYUVJ52K
JxRLkcwhfpCFWeeNXDcskqJlbrXLsDIWxuwPrwyjr1dbBfGELCTYDyzveixB
fI5G3uwqFobWs1UPzJHgZQ3xhfT4M9RT3F3EMB80fcSOOhaGL9SzadsugnIi
8YYsrG69HpRhKcIj/22i280sDL4/wuvEFBE4+4g/ZKEr5dKMG5kibLp5+r+f
7SxsLouKZtHro1ttxCOyoKKzdu7kbhFGsOqm2fWzEGHk2TI1VgR/V+ITWbgc
vLL+G71eLpBqH5OosWG9N7cxuDQEqqeJV2Tj5LMH5ptSQ7DkueOgi1psDJWN
ChofGoJTKsQvsrFK9PZAZnwIvo+TbWg3ZmPJV9UGn6shcPElnpGNd6WjHk5G
CA7tyXtsIWTjtv5YvZz4bfh4jfhGNrIubS6av3Ib7D69Gb/eio0XOBO7Zec2
7DIm3pGNLfsM99R3bcMrZ4OUk7Zs7MvqOPjOJQRWYuIf2XjfJrt+9kQIwk+4
9r9xYCOqN2nF4F0hqKwiHpKNCr+XF0cuDgH/T5gPx42NM29Km8MOhWDrGOIj
6eM3DNsfOFyEOysL7izzZGNPqN579wAR9HYRL8mm16dNgQanRFhT3GKa4seG
4fthvQZ3Rbj8nvhJNmLz04YXpIkw2JC161kgGz9i3g7LyxfBy4l4SjY8bzWu
0RSKkbPNvV1LzMagVsWo76li9GURX8nGl/TCBsk3MeZUxiyeG8GGt/jqnTn0
eiHj55EdG7az8Tzo+cw0kRhtFkVX4hLYMJuhcLrOEMN+OfGXbLjOlJUcHibG
3vg21t0kNk53rnPerS9GQyHxmGy86nsx55/1Yoxr5kf+OcKGbWycjs5nMaL0
iM9k40LU0JQjcgmeOXi8m5bDxrJxlffarkog3EK8JhvudS8NQ/WlEB1NmC0v
YMNyZVTt7U8S3HtE/CYbM2owdcYtCQwHbuRdvs5G+gWRuluXBOtGE8/JRlzY
vPvdvyUo8uoc0XmfjTl7gj/uOSOBRizxnWzUMx+62KpIsPySqXhMFf39Oxbx
d+n1f24T8Z5s/Hz942ghW4IfI1a8DKxjIxU7bmrQ65t5M4j/ZOO78b/1qXT9
jm5MtM9uZtPPQd8DeyvFaM8gHpQNXdXO7abrxJj5oPTY23Y2Lpl9HNIEMfb3
vv737zc2GlkJszi7xGgy7R3E76fr9cR1eve/Ykz0IF6UDZ3ywkBZnxjbYywD
V6pxUHXBK9qQvN/nAvGjHJjOtZz2W18C0zd+Tw5pcfCxZEnv4o8iSLWIJ6W3
X/ugXuEgQvm05AnVxhyYDS4OUQaLwAgivpQDx8wfzr+cRQhMq0jREXJQMjvo
2cvVIlwrI96Ug6uBKaPjFosw7PvP/nlWHFjYa/63yFoEbxPiTzkIbby3dU6k
COcWTfDdacvBc8qJ9/GXCL8jiUflIE373ZVB08VYcD6g9L4DBwt8jCfG0f3G
sdfEp9L7i/M6pOckRufQDDNVNw58bb7cyKfPJ0c74lU5GDNEZ2PpKxEOrq/c
NcOTA2Zj83UOXb/mFOJXOTgRcLyFSferk+6pdij9OJhf/YV310CCuC4Olb6W
AwM1R+bVMRL8J5i8pCiQg6Z/D+zRnkr3/wuIb+VA9vVDuOZXuv8PDy76JuKg
3M/NopSu/8M84l05sHXfkCGfKAG7Los9PoKDhNVzedHHJdioQfwrB19Ts+NP
/5Dgpm115MYEDh78Ur2c3SqBdgDxsBxou+zpHUb3P34HNZrPJHEQfWdei3qE
BBfuEB/LQXtuwCj2EQlUvtq7thzhoP/2NKV9vQSLecTLcrBBOnexG0OKk/O2
naVyOMh6rv1QL02KbiXxsxzcG9VZE18qhfM/p3V8C+jPW9IMZMekSP2PeFoO
ApZ+1rxJb/9hcJ04g67csQ5bP/4NKabYEF/LgcmR5YWHjGXYuVq79sV9Ds7/
cSswTpOhbj/xthzcku//6/9LBssSx+n6VfT+9lo1fbeTI+yL95YJNRyszwqY
GKkjxxO27PiCOnr+recOPh4qB28u8bj0/tYoCi6PVGCLPG/wnmYOtl/7MrNS
ocDtbOJzObA70JhcoauAbs2bwIp2Ds6N/JMoKpNjtRrxuhwMZJmnxpfLcWmC
QeWgfg7OOv/zcvcHOQb5E7/LQUZwkI2qUgHPRNeJUOMidN/z+1c1lMi+QTwv
FyFcm3OxYiV6W8NSw7W4eMV0Lnt8XQlXJvG9XBRnnntk8VKJ9NkFA1eNuZCs
z9lk91CJVgnxvlzEuhSs22AbimmnWnx7KC4+W2V0/zweij3/Ev/LxRSmSZTr
xVDU/2XenWjFhWFrvdkKlTCMHUc8MBd54hZbz7VhiPRxH7XFlouB7q/t5aZh
qNpNfDAXs2uKg1fS6znqWszuPAcu5s9O8AxEGEI+Ei/Mhdhnhp/HoTDcNSrq
+DCXiwUr2hSQh8HAmfhhLmYaaE3tyVMiQNS2ZKQnF29KLdMT8+S4cpx4Yi4E
O1f0XtOUQ72KX+zvx8VyH43Io65yLPtt1xqxlouVQWOatZ/J8Y+VB+doIBe9
1xZvvvlXjoEVxBtz4bZy6oJ0SwXcdiZE1Yq4CMgWzRjPU+BIEfHHXHxf5RS+
sUmOLy03mg0j6PH5/PCp75ZjhgHxyFyY/f69KNBRgX2Ona6LE7jYd2je0iZ6
vd24lfhkup7r80o/O8oxIcv0XGISfbwzNw65d4Pu/58Qr8zFhSeicuow3f//
WK776Ahdj6OBPqvlMoy0IH6Zi6/HMkY/bpVBsixRop5D18OhqO/NGjnK4ohn
5iJw9yr1iZFyGBeW1joVcHHs40KNVy/o/v8d8c1cNKrrZUxso/t/3d7pUde5
0PAMelSZTvf/DsQ70+fP1ZMBZ2V0/7/Z8sSN+1zUh1lKbFvp/v8I8c9cZKY8
GVF+RIFfD/2G9D/l4p+Stn0L6H7AvV8xxbiGC91nKqXGW5TIGpUcNKmOi9ft
bp6Ge5T46kl8NBcunx9dvuGqBHZUVG5r5uLFR12Dw5ZKJF0kXpoLj+ZV7y7F
K/Gu8efE8+10fYwm8J93K2EzgvhpLv1c0khdvT0UsdMnHGrt4+LWa5+DcTWh
eBFMPDX3//vzURkBP8zUeOiVDhqX7RAKeQXx1Tyo7kxzla0MxYOedL81Wjw8
uVbzadC/oWCZEm/NQ5D7cMZK3TAEL6m8m2XMQ9JhyxHbp4ThRjTx1/T+hMF/
jl8LhdYF1dGvKR5i629+N9iphG8D8dg8ZP6+NaRguwL5wyfvYVjxMFMn+HHO
QQX+TiU+m4dxMy5oMWsVWBQY/NXDlodX71c+HkGP/8Qh4rV5cDyQ8N8IRyW+
3c/yOODAg0uN19a4QUrM6r4al+/MgzFnWHxjqQIpwuriJ3N50F+oJX3Qr8D7
hcRz8zC2ZaNLYaISkyM1uEM9edgWa7pGu1+JhHPEd9PbDzFNal4VitpX9tEu
fjzE3GxxLw0LhcVQ4r15KK2OXubrFYrQKdtaYgJ5OEdtu/ZaEorH64j/5uFG
f57Zk+JQcFNOzykR0fVwLXnjcTIUm+8SD87DvLO1A+p0vUs6a8/9COfh1Nl3
LicS6f5fQHw4D2fV2I/Ln8qwyl1bb0oCD5MLg2AskOFiGPHidL3S9n72aJFC
Lc9RKk7i4dIu455xr6TwqCV+nIdcs0e3ftP992l1Wd2FIzyUH+O7PflPip5J
xJPzcMT82+3D8VLMXps340s2D9r3ksMGjZUiLYn4ch4a9bd+Ml1K9/+335ww
L+AhwN2oqfQ03f939FfPvsJD2KWLi6JK6P6fa6C+7joPHc5STmQN3f+7EX/O
Q7SD2sxnd+n+X+kafOI+D6KeukzbCCkizhCPTo/XbYSG5VYpnr4Ie9rwlAcG
N25HCN3vCwYTn85DXdWSj4/tZdhmXWDNruOhIF4/IzaY7v9XEa/Ow8LTy+r1
L9P9//6WQ0ubedhosKnGsVyGtbeIX+che2Zo/9ZUGQo/M38ebOdhs40o6sFD
GYawiWfn4eAxg+uqXTIsnePuX9XHw+AoN0+fbhnOyIhv52HKXN0StX4Z+k/H
3Buuxof+wFnZEyc55lYT785H6fadDWypHIdVi0bP0aI/Dxk0amSIHJ/HE//O
h+amrzubxXJM92vbE2vMx5aBfs2S63Ik7iUeng9n9Stf/PTp/v86v/MOxYel
xcIrAhsFxrcSH89H3SSefbe2AtEMD8/flnxkpHI4ITVy/OtCvDwf/pwtw7YN
yGEiSbg61ZaPTCfp9fBkBcQniZ/nI9noiHfMGCXuP7vBlTnwkc6qve+Zq4TR
3xcLUpz5GD1yrsq7ViXWj+2MvjSXj3M1otartUoUexNfz0elNluRqq2E5m7T
9x0e9PE66xoPnavAiqvE2/PhkfjG/Aj9fM37sHyulR8fY8tuFS/rUuCnIfH3
fOzYpFAxX6LE/FmJ5zcE8vFuhmTWnVlKZIYQj89Hvo4uz/+DAh3HSvVOi/hY
GTKLfzJVAYenxOfzYYLRy4ccVeDArx5pUzgf7m0jbAf/UeCtJfH6fCweUy3Z
3KeA9QrLV9wEPm5b7T1jNFGOHQnE7/PBPDpmMytYiporfjNXJPHh03m9zOiK
BGYtxPPz0Thp4uYQqQQy/eSTqUfo+u2crDVmtQQVIL6fj6Ox7+5nOUjA3Fqh
/jybjxeHBlwOdosRlEm8Px8HzsxLZ+8Q4/rjn8EjCvgQ3Esqe9wrwvAfRplj
rtDnQ/7ZBL+hYviYT6hyu05/f9ut0lUBYpxfSvIAfDwZ7zXyQa4Yf2IDbBLu
8xGSovujul2MhZdJPoCPa7rmrZ/ofuP42/S0e0/58PRq81mgEKNLh+QF+NDS
m/3czkYMp5mVP//W8rF5QK3kGL3/5E0kP8DHsGjNOZ2XxGg5rLpqejMfbe2B
quotYtg+JHkCPmzzNpYf7xcjvs/2vqKdj+mPJJHNw+j+34zkC+jxa5100Gug
+3/PYPMrfXQ9xwwt+vVRDOV2kjfgY0VGx7MbQRI8Ksja26UqwI81Sb1B9yXg
NJL8gQCLRtg+uuMixSbt6s6xWgIo1oe9npArxS17kkcQ4NVEfx15pBQjgjW8
go0FcGAVXlBRl8I/neQTBBh4ZDIhZZwUBeX213IoAfYoF11Qlkmh2uP1+b6Z
AEXmUS0iOxmWjNzGa7YUYENnWvnbXTKcWkzyCwKU53nUH8yW4XvU6RiBrQBr
ztvcNB0lg0s+yTMI8DDXRlI7WoZD9bXvvR0EeOu+9m/Rexk+DiP5BgFW7NHh
nkiRw26qtlv6XAGyH+2u2TdfgV0bSN5BAFGThnDgtAKvUh3zazwEmCG2fqEX
qYDVfZJ/EKAgeCBrn4kC4d+k+np+AqRZmGyzNlOgkiJ5CAEWDN75+f0GBfgL
82TugQLsNrAOyhqhxNYIko8Q4IlH2bN5lUrcOfvm1S6RAKkuOfWNlqHQe0Xy
EgKU2jWVX1IqsUbTwKE8XICGcaK1n+IVuDyZ5CcE2Hp0iq3lXgUGr3M9pZYg
wLgML4NCjhJeySRPIcDz5sjQdHr/OaVhGg5JAnw4MHDqv7Wh6PuaOtX3kACF
KWl5HcpQzOEXbAw7IsD2ALWYkfT6ImM+yVsIIGS0zXp4VYm20Jaq4mwBzNyr
0vWZobDPJfkLAY52eMbzwkOx9yVz0vcLAtR8uJDytDMUDUNIHkOAP6ueWbua
h2HcJPf0CdcF8HY9YHa3OhRRa0g+Q4CgsNqfO5+H4tmBmF+b7gvo+0FR7eJJ
YRDeJnkNut6CE4ZPnishar+yKvepAKPLOr5sGKLAPQ7Jbwiw8KfPmIx2GQzd
2u6/rxWA5R06qtFahnUKkucQwLo5XfzysRRFOXwLk2YBzo5VDSx+LYXGC5Lv
EODiNZ98zdkyLB/kkejXLsAO/mmDZVdkyJ1I8h4CxE2L8hlqKccP/4Suw30C
tFa9pSZ9kGHePpL/EICranGhx0GGljcNeZ9VKGyzDb/jFCvD+T6SB6Hw5ux5
Zi69/pbp9tcPVaewKqV15u9MORwsSD6EwgX/5W/+4Sig6aSvYz6cwmHHxzwP
oQL/riR5EQoNq0U9egIFDovHOM7WpXBiSyKvcI4Ca/eS/AiFKdZmvKjjCpA/
UgYYUVjfbZp2aUCBnlskT0IhR7NiadxCJUr+W5W9nU0hMYHbdWwsvf75SvIl
FJIjvuSUzabXX5phL48LKJQ2Owaso59nLCHJm1C4rG5yrsFCjndTU4feNqXQ
uKR55MUvMpxdQvInFP4b/vdoqLUUko0X7BssKJinajzVdBNjRizJo9Dfd67d
pTduG9QzH27+OY7CMK/g4bUWm1B1heRT6Hq9DuYM2h2E9KfNx1iTKIzi7Ph8
uXYdVn8keRUKi+UmQ3oXroClyp9/p0ylUOd6xvea3QJ0M8n7wejfW8SsaDgx
HzcnMgcvnUlh3ourKt7UPMS5kTwLBasrMv2+H7OxYK31ZMksClkvTQ/NlLuA
EU7yLRS4KrEOVkHOaEqZH3hwDgWTpKx9Eisn5J4neRcKM0L0tu6nHCEqX3+4
wJ2Cn6GyrWEcYN9I8i8UunYNrM+JcsDg/ugnT5dQ4F/uORh/cyYqdfe99/Wi
0HTusoN7+3Qcsjjy58sy+nxI05MtSJ0GfyeSj6HnR5k26KzlNJh7X5kw3JfC
FcuMS8P226FLTPIyFM4fGGV+ZGAyru+tWmOxhsLeBd/TdTptsSOb5Gco2J3l
uiaH2WJ+SWuK6wYK+6aWvCz3nQSjlyRPQ6E4XbMk5qoN3nwdVLFuE4U7u751
FlVa44ymXtP3LRRUZHY3TMytsU3IH9gRQuG3YHnb3RkTMXWalb6BhEL0fUFC
9Va6tfawszopo6AM4xT3OU/A440kf0PhVvmHMvN7Y5ESu8T3Thg9vu5159r0
x8I3k+Rx6PN1etTnxF9WGFW0af+baPr3zez/bK62wNenJJ9DoY27wPNxzyhc
/Rhf+iuOwrtcz7JlH00Ro5Lyas9Oej4Ut4wtAkbCjXWim72HQpG+74JhLFMY
WJP3UdPzcfKa43xtU9S73TCbeoDCIqOApuPNpsheS/I8FKLeZqW8HzISW8Jf
LFuWSuF6SoWqt9dITEkl+R4K2TmTay8zTaCS/3WX9DAFzeWPz7lrmuBhOcn7
0Oe72cGlCUoTHGwcejP5GIV/f3U7+ewUwruf5H8o/NmuYej7WQBTPdOOi6cp
1LwKknnb8dFuMVHD8QwF9aNnUlc18VHkNJN6lkthuNKKfZtep0d5k/fFURDa
n1v25JkAcyTLl3TkU1hy3T5+SDEfeokkL0Th9TK/+pKhfLzKFsVqFVI4On/c
hzP5HJwqIfkhChWdGgKTuzxserm3yPIaPb6M4WtO/OLCtpPkiShYP71mZbGb
iz+aZz7NKaGw/4ZzfvcPLiqEhaq1dyi4p2o1FH7k4MC0UvaGexQy23Z39X5g
Y4XHU5veMgpGW6d35i3nwGTT6/lxDyiIg2xqN9F93+dYkj+ikDZbdqzHgIPC
zJ7IU5V0Pe9WsIMecRBRRPJIFLa8D5ypt4ON2VU6F0ufUzDeOizxkD8bOp9I
Pomeb/FRpfNSFmpVLJsbX1I4MistI5/BxQnWlF9bXlGIvLW49sMSDoKtnY3+
1FNYbnfA9MUDNmzmkfeJU3j/aYe2/iAufq31c+W+ozBijadtdScbZeEbV51t
oa+nnoJ+w60s7EtVKKd9pPBqjG90WiYLy/JJvonCk1adeTs3c0BVHDy7/AsF
5+3iLZOvsdDaSPJOFPq2ye6HHGTjUv+5BlkXfb9W3aHSt5uFMD3y/zXo+4+5
1poHB5lwtqzQSe2l6Lo5s47dYkB7Vo256QCFG62T+SYqHPzn/dbx8k8Ku1Pm
uuQHc3BM0rHS6Q99/Y/+dPSdLxuBiT/F/6oIYa909ByoYWNiDslLCaGcMf6C
2gATP0qMcr4OEeLC7QzvDg4T916S/JQQNeK5nomTWdjbOb5We7iQfn7bOX74
yoHX0BldR7WFCKt2e9ZH15tv4jZsjK4Qi5hmztNz2Pg4bdnIG/pC7D5VcMD1
MAsFHgHT3YyEmD+qPy7ajwXlphCvOoYQNvyI7me1TDjFRW4JZAvh2FISH+DB
wfAs8v5AIVZVbX6cOIWDmqL04/ECIQobF+5/t4CFzCqSxxLi8aXoijl0/dd/
uvT8tKkQ8g5fDX9/Fsar3vlsM1oI5xnnziUlsNDPqhx8z0KIZSP9fX48ZKHU
+hVvyRghvD41eJfv5WD3vI+T344T4vfNeSrhkSx4BHxfuG2iEMk/rrKmTGSB
G6Ea9NdGCPGCRvbet0y8Tx2xfd9kIcb5/l3rbsFCfj7nCG+qEI+mCANWCJiQ
V5B8lxAb3x5YlrOCBTTZVtrPFKK8KKbV8yoTQwdI3osevz7HftR4Bp7rLfq7
YpYQ2X0Tspf7MHDE0pfZ6iLEd7XWpbvGMRAwK3iiYo4QS46ufLzogTHG+sjd
NOYJ4a49vbveyRi9kti1h9yF+JNp2uSWy8DtxKRws0VCBAXn9A17aoSdOVmp
hUuEyNzDvX+vwgiLb5/Nn+VFz0dU8brUMCOwa69WPF9Gf3/RzpuRP43Q3Eny
Y0Lo/fE1/LvOEOeGVg90+gixfNWvkyutjSA1adKP9hei4cotE8u9hphp326l
s0aIuVHJ6sPiDKDh+cM5K0CIp/o6P5brGeLZJg2/sRuEKKbKcmwKDJARZyi/
GSSE6VzFovU/9bEmS3hg3iYhfpa+aL07Ux9WxeT9+kIcropNHBxggO9V9neD
QoSQlK9cuW6bHm59Ink0IZovqls99dZHvOrS7wkyITZs7HF/46uPhey12gyl
EJ9it3a81jIA02bbqJwwIULaVzAN7PTwdl6Eg20kPX7eJZdFZvrIC9i9/H60
EHdir+0MvakHcURaiMcOIUaaXum4NU0P0w+d3v0ujj6fInSUYyL0MeTCxVMh
9H164NOpPT0lenhaUXJTZY8QJovVfA2e6iKtibxPkj4/+XZbAut0sGqgtoN/
QIh3tyMHvl/Vg4X+B438g0Kk5DYmUjG6+GbZTc1IFeKLsyTLkf79G7NUpj1J
E2LTqxHltmP0EOuj7eF9WAjfmpUNraZ6cJeyN7UdFSJv9Ne93tU6MN43Ok55
TIjZ2C8NUNVDY86kLM2TQtQ9eJT3xEgP/9x2LE47LYT/OLvZk7p0EVK74Nmo
M0K8/jW5/esNPUzr8m69kivEieCBr0tu6GLQsCA1l3P0/vu6W98b6+KJiYxT
ky9E38np3Wp7dZBqv2PS2ov0c+qPsMU1TQ9+ngfcv10Wwm7KxjXtjroYvTlz
fUyRECVXgw8FeOmhMy4vSveaEHGee45rjdfFtazi9GM36OtVY/jfeVa62F58
/+K4Enp7UeGtHI4O5j0j/w9IiIKL3cL+k7owbH3TPP+eEDJT51Vez3XRoPrl
1+sy+vobeqJ+/GJd5LAHjDY+oH8/OyN3VJUuttqoj//xiL6e0h3XuebqwG6+
wZxdlUKsWXd4UsIkXaiuo1Yznwkx1vnxn5BbOngUMTb0zHP6ftaHhOa1ekg+
NC158gt6e9eJzYWJOvC54Hqu7KUQhtXWS1MzdWH2wLPM85UQIolhMZP+fkfT
6jfN9fT8Law+OYuti+KBLX2iRiG+Dvl2guWkg2j9cF21d0KoVITPUWjqYq7V
LoukFvp+o6hpqxyjC33nQ07URyGMsiWil6U6eO1zyvtCK31/miZjmZfr4rS0
QDLzC30/2H0h+FCRDjbvu5VY2UHP55yjmeq2uph85lGOTxddL98LldqrRuDv
7Ze3P3cLMdHmc4CKty4e1LbUhvYKwTR7Nd2xegSSurq6hg7Qx89rUbbe1sXK
YX+HZfwUgrOleu1Ini5GjtQyNf8jxGBvv9MGYl38D9GDUoM=
          "]]}}}, {{}, {}}}, {{}, {{{}, {}, {
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[0.006944444444444445], 
          AbsoluteThickness[1.6], FontSize -> 25, FontFamily -> 
          "Times New Roman", 
          Thickness[Large], 
          RGBColor[1, 0.5, 0]], 
         LineBox[CompressedData["
1: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
W72kcqso/tVJCVKPd5r/mddLgk0U3L2MwtDsSPlXL0lwqHBQGhuGqSpPC+vd
e8nb9NOBF99LwHsymeFjzHhr9T/7PpQgR5K47mNsL+Etcr3OdQrDv1mUn/WS
awYbh5vohYO0eda/yOolav7v0s8kh2NnGuVrvYxef9voJQrHs61zg+9X9ZKe
2rvVxWvDoTqK8rde8q9x7enJN8Pg8F5F6ZpiHzl6TtD9bZYER+Ion+sjorTZ
XydPk6BiSeWJpGl9pLzUScrutgSjpCi/6yOZTW6vX12TYEvutfEJzn1k5ifP
cs4yCS4EUb7XR0aULahxvRuKhokR96Ki+8jStX3TzDxCMbGugeF/feT//L/A
JMcVvPQ+0rv8woKQMxLcXk/5YB/54Dhnjn6bBD1aYys93veRhKUNVd7yYbAs
jmH4YR952TR6rM8FCSJ2dvo5DfSR+zpPfq0VSfBkPuWLf4lJWjTb6rkEit2F
A0tN/pITCrk5c+PDsOI65Y9/iW7v35sphuGI90o8ONfhL4n4GuF2xyUc7wwp
n/xL7A+G5rXVhUH3i+foiaK/ZJfaH7cUZv82HqX88i+5ush+6P2wMJyzm3tD
L/kvaVLV0GDnhaFWgfLNv6TAtPfzz4PhMH2kskij+C9J+Xths5VGBHzFlH/+
JR0n0p/90YzA9RmVZUMdf8leXvWD5KxwdDZbM3z0H8FwwWZpj3DMvnRtW/uo
f+R9p2Lop7pwhLpSfvqP/Pevbwz7WQTydSM6a6z/kTcfj32+uyASsmUNDF/9
R0yF096cc4nE0hjHXe/9/5G8Ro2tszLDccCK8td/pMs3Oeh+tQRv+g3/K0r8
R/zvbpiZEieBdnYMw2f/kUkhTxJaPzD1H9h5KSf/H5l+S6N1zJIwnDaj/PYf
SfO+kr3Dn6n/74UWVxr/kSOH459EsJj6P0357j/yVWrVGlltpv7XJj47xeon
Be2KadXxDP6rU/7bT3bE/hFrP2Dwv8hzQ+y8fqLop350t6UE5pGUDzPPO2UX
5LElCJ4792eYez9pOvmOzD0UivsdyQw/7ie9u2axVw+EYChdJSQwtp8Y+Ym8
XUkIrLZTvtxP0g57Go7oZ+rfoFJla1Y/eTxs97XZUUz9V1gz/Lmf7Fph9GDO
eqb+D107vbqqn8SenM8a3ynGGlvKp/tJY/fwLXPjxDguGzHJWnGALPBVFY68
I8KXBw0Mvx4gsfqerrd6gzFa6Phw1rQBcvXDs6Nhw0Vwn0r59gAxfOPmG79H
hNRGQ3tT5wHy3Pby5ewmEZqTKf8eIObbEzsS9MWYurGzanj0AFHfPHDyYYkI
PB3KxweI9szmhynMeDmvCwNV0gdIa5higWUOg/97KD8fIDfXyPFU6hn8R6JU
/7sBMhghY7frMIP/fYMMXx8gbhZvzw7oifHsluehlv4B0itW7HOYLYaqH+Xv
gyQ3omK07zkRHIznjq02HiSZmwS572sZ/K9KZvj8INGTt/DYeyQYFcdVbpfa
D5KnbfKeg/+CMWoV5feDhDNh+9hENxG2qFRaFQQPklXWVerJ5gz+P7Fm+P4g
kVh5u29NDkaD5Nr72+cHidvIWxekrwox0YLy/0GS7aVQfqxDgMC28O2XXgwS
9qL4oZjZQtxOo3pgkGx9+LXkjFIwerY6did2DJLlM3Rrxu0LhuUoqg+GyFNF
/X21TsGIeG+4d9+oIeIipaIQuUiIJ3FULwyRfe9z3Q7+5UNxaaduiPUQ6X8Y
szM8gY8VUlQ/MO/XutiuqGX4f25hmq//EDFm28w68Jnh/0FUTwyR8FKPCXb3
Gf4/KXHu5sQhcmu+OPycDR8b6wYZfTFE/nx6uH6Iy8O5JM9i+/wh4tTd0VhS
FoTa9VRvDBGL16eH0sqDYMqauxGNQ4S/8W2Z4+0g+BYnM/pjiJxs+5LnsTAI
HxfJd59QksLoL9VXWjSDEJJE9YgUmv82pWTf40Lvn38eS18Kn8rGnNbw5iJv
PdUnUvBS8tyzNowLtzvle2KmS2F/R8Hj0UVcyLCoXpHCgQOucvUvuLjoTxxk
l0jhfULtryhGLy4ppvpFCul6dcf0hgeh0SRNV+IihcHYzZaxjN6L2Un1jBSm
HT3V0reei0nftL51BUhhttmlyDUxXJTMp/pGCvLRZi5m8kHgnBSn+e+Ugk6k
qeHy1CCwu68xekcKKjP7rtTO5uHO6hpO/XEp3BkWcnCsLg9O16n+kcK8oLeY
GhqEXtUVc7dkSOHVpsdqL88H4ZQX1UNSODIwrXXzYh7mP70t/fGRFMb+zDra
k8tDlSHVR1JIFaZcNPLkIzJcr9jxgxRaYlkO+zv5GPvFkdFLUsioHoNRt/ko
nL378IufUgg/mKnla8HHjqNUP0nhq+5i/+MT+FBqb3FZPCiF0l9+3pue8nHV
juopadiM/V1/ZbcAK686Gd1nS2PpQPqIWwzfb1Wg+koaHw1EyY3jhEhwz282
N5WGcZKo2+W2ADMeUb0ljb+TqmXUswR4r2d2J8NSGl2mBfJ/meeFYqq/pKGz
WSZMdEWI4eUJEmNHZvxGgyp9hq/fm0H1mDQ+zdGo23MtGJvi+6yTPKRhVCP/
7djCYAw2T2b0mTRcS637vzcLcX7ZNnVdsTQcswI8vyEYiy9RvSaNJQ7s0I2C
YPyQfvkhPo6ZX8aq54eHBWOPK9VvzO8filokw7xvdt88SSlFGtPV71jGnBWi
WJfqOWnIpkribaSF8OOf2RGVLY2FZocaRo4VQqOM6jtpKK9b8nJxhBA3JstP
/VssjQDXW8sqDYKxOobqPeb+DoW6+anB6Kr37wmqloZ2+t6MysJgJFpR/SeN
gXP8fbd/CTHnfHl+c6c0/oQv1E1/KMTnfhVGD0pDEGo1oLEmGBJnss9DSQaJ
xkWZDyCEQTbVhzI4vO1Q51szAR6x0xy/6sngBolcfOsyH9sCqV6Uwbq5W2MW
MXpe7pXWCKfpMnB2aTr86jsPl82ofpRBsUJn5WxvPpbtFn8vsZGB1+X3hnx/
AZq+X2P0pAyO7vxc3WAoROzCmitLXWQwfmwHK+mmEFNOU30pgzUfDP9c/y1A
aY9t0KMAGUjid6Z62fIRtJbqTeZ917axotc86Ny8PW/uThlkj9zG+xTDR7Y6
1Z8ykB6pk1xhJMAGHz3ZW8dl4DnC6tAlRt/+LaJ6VAb8KZKaVasFOGO0++WE
DBmMNEmXPbVUgIWRVJ/KwKVuR1ymvQDfKluOXHgkgwrJlImqw4SInkv1qgw6
Gk7Fep4RYFyi0ya9DzJwVDzbu+AwH0UdMYx+lcGEeJ1l5Uw9eDnkjzv2k7k+
OZ316CUPKhlUz8ogrM9AfukBHjKUzFrUB2WQ5z12P0J5sN9O9a0sXOa6bLzS
zcPvxwlZe9iycPQ+v6qlmofDBlTvyiKNz/Ky0OFjZmhf2JCJLH77GEtf/M1D
eQXVv7LYbvA1TKqTB9HMbUtElrL4+k0rJYXppyMPUT0si+nHbpy/UcvDg5Zi
jXYHWdhdePTfIFPPrrZUH8tCcDa/wXmaAFKp5hXeHrLIsv+05EGsACmyVC/L
YkFw0XrFBAGs3c6cqxHJQuP0fJPMZQLUP6D6WRayc0ynnXQUYN8Iea+NcbJQ
MNu3+LCsEBOEVE/LwiSHf9EzV4hXb/2nvU9m7gctOZXM4FHAVKqvZXE+c8HV
hBHB0Iot712ZLYuKHw9O/NANxq1GFUZvy6L5whepIx1CrLUhj58WyyJW2L+8
LjQY3clUf8viQMLg5jI7EU4Mpu5fWC2LVWb7romUxJi3kepxWVRKOXydcUSM
yhyt1TmdskjNXGQ7pkGMcB2qz2Wx5lquRHJCjDFc8chpSnIQ7HHL6j8jQsFr
qtflEHtq1uqRWSJ4TKipSdOTg+yq2Yq24WIo7KX6XQ6rFt6Mv+EvRlqtbbrh
dDnox7VuX+8nhi2onpcDa+0V0z/M9a8zt3mnbORguW+xzxgixsG+Bkbfy2FN
vO+uC2FiTHPSm6/tIofns1K2+G8KwdtbVO/L4Yjpv1Nlf0PA19wtFxsgh5YR
uR0ZK0MxzI/qfzm8lonYtdI8FHeft7yS2ymHFw/CrYqHhcLFmPoBclh2qe0z
1yoU/VFOx8KOy6EmJ57YMXoyqSqmLzdZDlt+2Q9TWBMGWOZv7k6Xw0xRiver
ceGoOU79AjkU5ax9Xn8sHLu6TE0CH8nhuHfrivNvwmGyivoHckiU3TRiwZFw
PL+W0NrwXg5bta5oFgVEwEeF+gly8Ft0+VSXQyTUPPuy3X7KwcfSz2hBQSQy
n1B/QQ7LDccHje2IhOOYbRGfBuQw8diFvNrrkeiQUL9BHhomNSNUxZE4+ql4
6Wq2PGaxFISB7yNhYUH9B3mMv1UU9OZQFD4eNtd6aSIPu7W5dypY0Qhp8+Qr
TpdH9pSS4yfco6G38sxHK0t5PH0T+uZZWRTy0qg/IY+8Fm+L5JeRcJOXT37g
IA92ds52hTWRkNlG/Qp5cLft2+G9NxIX8/y9Z3nIY8cEeaeo9kgsGUX9C3m8
WrToXBYnCo3B5dMzRfLMfvq1teyNQsx76mfIY/Tkfw49M6IwaTr5axInD37m
+SeTVKNQEkf9DXncr9h8P8w6Cpym1IJzyfIoWBw7Yf7VKLCXUr9DHk8Kd91M
q4jCnQtaB4Zny+PwZEdjw01RcJKi/oc8Wvw1eoruRqJ3k3jNoWJ5XD/jcevQ
nwicyqV+iDz6b1bKrHsUjvnDakapVMtDZmuZIK4kHFVB1B+Rh2NfW+Od6+GI
fGP7I7pTHtt3fY13XhaOsZOoXyKPDa+Sbm59HYbCfbcz/ikqoDrNfbDYQoId
dQ1ac9gKuNZ6S7O/LQRKi/UEfD0F3Df7tjGD0f9Xk6ifooCcObdzyt6FYOW/
XQtapilAec19q+yVIWhdT/0VBUxIXrDo3lsxEu60yO+wUUCoJC7r1CIxZrCo
36KAr4r7WuYQEd77O5VUOTP3c2KGdF2DISym/osCvEvc2CrfGPw3zU9cH6CA
FKvVss8yhLi3k/oxCjBKmNQ97agQm76ZbimNVsCVYTlDvclCDM6n/owChmUX
bVA9yeD/yQTT5ccV0B73c4WWtxCLuwsP7E5WwLpRy+6oeQnxY3Vf2+N0Bfwj
PO1xzPh7rlP/RgE2Un/Sn3Yy+K+27e68RwogVr+fyE0JRrEX9XMU4H7XnCyR
BMPvaXHk7ffM+DeMfez3B0NjLPV3FFBvOc3aaG4wboSbL5/0UwGppU+vc5cy
+P/F85pXpwKi5X8Y3jzJ4P/sM6xLAwp4lb+POWoM/h+l/o8i9I195tdNFmFO
u9xnfbYi7t54/6d2ZjA+21E/SBEr60YrqzH4K7nqn5Jooojvy79OcRrD4L8i
9YcUMT7MVPl4kBCP3Mt9NC0VMe77uqD2/UJse0T9IkXsmjVRZ3iSAHL6xHyf
gyKu3J2U6jxegMti6h8pIlH+6Yp1rxj8L0/9J+WhCNEjw2JzVz6aZlA/SRE2
N1e9cPfjIzZeq1AsUsRDpcNTb+/hY8ova7PsaEVMVjlhHnuMj9Jl4tiOWEV8
sD1uKNPA4P8l6jcpIs45P7q2hw8dmZq1vsmKKLx3KHq9CYP/rtR/UoTTm+iC
tV942HDfVv9HliKC+nX/3m/g4a8u9aOY+7d+Gz9j8PMM/3bdpmJFnB9Kf/lc
i4+FZdSfUgQnd66k0piPb5P1Mj9UKcJu+gKVaiM+omOoX6WIgxrGuycxeD6u
YZfQvlMR92rz3Mrv81BkRf0rRcCad+dePw9e51sWPlNUwul5K5pqHPlQGTC8
IMtWApaLglXP8JHh7KQIPSW8lu6qlNziwz6b+ltKDD8uMDo/i4/f7Pw3d6cp
geNi0Cw5z+B/IPW7lHCvlCEzwTzMfGV6YrqNEhzDeNXXExj8N6P+lxIUtux9
fPABg/+7E9yuOishfKBvhkwjg/81hYX17ko488tqu9sxBv8X9pkZBSih7kWy
nKs5D66nqT+mhNtyKgq7zXiQ6t3afjpaCam33lxgWfKQspb6ZUq4Y37UaNFq
HqxvFufqHFdC5zOFObvn8lCvTv0zJVxbNinZbiQP+3zMo+PSlZBy6vzOB6VB
mPCM+mlKUBavLrbdH4RXRmdsFR4p4fEIcbrgThACIqm/poQsjRbN1cx8tL7K
aUe8Z8ZbNDXlAvN9t+ZSv00J/0bc44lrg7A20f9LTyPzPdFno93ruOjuSCYz
O5XgLrNQ9qozFyccyi9wBpSgsc1lZ85ULuZlUD9OGc+X5eweuYuLSiXi95Ol
jMRJfhun13IRvp36c8qIfNBY0jclCGMKUmduM1GGe4CXb9dfLgoMqF+njI7Y
TqMrB7jwCNUa+DxPGWQoJuv+TC4UPlpv1bVRRtvKdVuT13CRNlP8dI2DMs62
Dt31KeDC9hD185Rx37v3soJGEH61fI975a4M7+k5QfG/uThoS/09ZdwWrrxa
SLiYlmrrZCNSxheXB62Vhhy8laV+nzKW1Xo8DLgRCL7bbYO8WGUYX94aK6/K
wbCH1P9TZviBeOQXWw7ujtBrsEhWhta1utVq6zhwEVI/UBmHfIttrO4Gov/t
ruvXs5Th0r1WQfGUP5KmUn9QGT8LmyN0//kCsS3BZsXK+BsQUnpvmR9qGg0r
Pd4rw17Rd177Y3/ssnFCcpUyHmCEJFsxECYp1D9URmOy3ZOI6gA8H8xTGtnJ
PO/xeaXiKn/4bKR+ojJ6pUffu+jrC7W7pmWHFVUgUzZ5s+paH2TqUH9RBWKF
yGcBP33gyE04qaqngr913c2/jf3Q8Zr6jSqYeK5/efQYPxyd0Ld11zQVTFvw
zDks3wcWe6n/qALrS5bC3cbe+Fi7dcKAtQqCT/1brMT2QgioH6kC8zBjaZG9
F/TOFncInFWwYL2DoeY1b+T1DTrdclfB7gKDSFamD9yczO+3+qvg7DgfQcIF
H8jcpn6lCkx31hSPm++Di5pndnpGq2BD+5kFX757Y4kf9S9VUNJ4afirFT5o
fC638luiCpxfpFoH3/RFjDH1M1XQHZK/b5GPHyZF++s4p6vA8NPhv9OV/VBS
lSw6lqUC5s9R9klfcCzLK8vyVaCkU900qt0H7BPU72TG99BUk1bxwZ2uhZds
36vgs7HDpzVnfeC0ivqfKkgSWRqYTPBD77VU/yeNKri3UN1s3JAfTqlQP1QF
sT/dr8hs88d8Ty2L+QMqsG2yTZ1X6I+qJ9QfVUW++sTLlnx/RI4RD95hqeLN
px+XT63zx9gw6peq4kRocrg6PwCFn74XTTZRxb73sq2O2YHYYUH9U1XYHG4+
XTmNA6UjtvGX56li/p/XVnIbOLjaFt5ZY60Kt6xlRibVgVi58vb60Q6qKLae
23d6YiBa06i/qoro15e+uXgFIkFeb8wJd1XUrVCtb17MwYxt1G9VxY5V/w3f
k8nB+7xdjVoiVXQXXOu2NOVCOIr6r6qQLlm9KW8KF8NFLTf2x6oiuJjbZniM
g3vvqR+rCr05GbpP73KwabqTWCZZFXy2ftmOuVwMxlF/VhW2Xfu1m0o4ON+U
tyg0SxUDejtebRRxsHgp9WtVkXqNM9YwkIMfF0xVul6o4q3NcOvbjhzskaL+
rSp+ZXWN1N8VCLPNCW/9qlRh1j7vrp0wEMW51M9VxZPxQ1t3mnHgN6zvVF2H
Ki7nPv15aCsHGjzq76pi/wL7YJsLHNx4s9XdVVENNwau67DOcLB6EvV71bAu
zEvzgAcHXfuKJ1aMUsP6riNJaos4SKwbjNc2UcPwr3G/JiZwMGexeZfDNDVk
K6pOakrj4HMS9YPV8DPK6YLiXw4k/04/eG6thuVbnpx+Mp4Lgw3UH1aDWeJ2
l5RuDh7dkdu9yFkNrpvkzfzjOdjGon6xGhRf3dqfyowvF+Bvd89fDeUPDF6o
dnFwuZj6x8z1iXu90fO5WGZa/p95tBquqVl3vTzORdNO6ieroWNmqOucy1zE
fltYlZ6ohjHVFcJny7iYsoD6y2p47a1vYjSci9KTqZfHpathlqweO2EfF0Hd
X1S2Zqnh8p3afM3pQdBZoxV4Nl8Nh+cXi9++DUL2deo/q+F3upkwyorBfzXx
7GHv1bBn5tnucWDw34v60WoYYnkY9jJ4dObp96GDjWr42io4/bA6CAvHUn9a
DftMjL/MdufhW7jtc8UBNaxo3M/LOMJD9JfwSdaK6uA1jtItesHg/5zbCZEs
ddxMRpSojsH/o9S/VofKpbwrdy8z+N8+yrnPWB1nfBpyNSSM/renfrY6xvfO
S+Yz/CHj6i7DoHnqmPbLpr/emsF/Repvq8MzrftHbiqD/+4tP5vs1XFpZJK0
whU+Dj+ifrc6voc2PzX6x+C/PtOu3NVRFphzOieGwX8x9b/Vcco1Yxx7AYP/
5XkhlcHMfHc6rwtmvnekOfXD1XHCrdKaxQ/Cg3hTq3Wx6lhqMaq1b2IQXH9t
TD2UqA5H96MPuqq4kFqeoFpyXh1eAbMs123iIuUS9cvVYc/VeKA3jAtrmb53
S7LUoX7n7nJjbS7qXal/ro76u9lhYxj82Xd/65n8F+rQeLK3qkOBgwnDqZ+u
jrxcW/35qzh4xS/2mFOljgVzsn3LV3MQUEb9dXX4zG9OnurKgdYU88k3O9Qx
Svuurd1pDm7FUL9dHd4H3iZrMudrbcPpP+MVNRDjuUQSc4zBfyvqv2vA/Gfw
h45PDP6fl8tLGaUBZf0JWUYfGPwfmDO22lgDYyu4RQ8PMvjv7L9n1DQNFDju
qs9hzmd4NvXnNVDo5JuoJ8vgv3a5/VFrDWT8imwlwiAUBFK/XgPC823rFBuC
4PFqoa66swYGieD1Nx0eFMZT/14Ds4rVDdO/ByFtd2r1bn8NVEzw+69GEgTb
mi9WBcEaiNSc05O9g8H/hVppg1EamB/9cYx3ZBAOnqb+vgZKJdwLhk8Y/O8V
cYITme/zzWmQCeHi7Vrq92uA7ch/UyLhgn/z+5zfV5nnpW7eyP7D4L8G9f81
0BSl+G7TOwb/fWylvfM1MK79WN0Zcy5cntE8QAOKCwa13t3lot/o9ovv7zTg
NePcaZsuLpIiaT6ggd4Ch1UT/3GBr6MOuzRqYE2pp0HeLS5q5tK8QAPD3nY2
/lzPxa7EXS7v+jWgMA4nd97gwqTzbp6moibkvxpqTGXO13OHlrErWZr4Nulh
uU5JEHwyaJ6gieNTOKUqUjyoKTs1FxprwjCgLdSoLgiZ22m+oIlhc1TGqWQH
wbEg7/aCeZr4I3XMcfrvIHQY0LxBE397csv3ZfJwNNRUkm2viens5yMEDF+2
+LjxW8cGTXy0uXXOwJ+PjzMTrKe6ayLUWEe3P52PkEM0j9CE8+9+O7ObfOi1
9qqlBWsi/Kj3xz9OfOTZ0nxCE82ui5dk7+fDLXXrhzGxmujmykfVEgFk5Ghe
oQn1onKpM0UCXHQrPnvyvCZufjzcbT1TiCUPaX6hCRPNIP2DIiEaR5jvYGdp
wm1jn3nOCiFihDTP0MQ9o6hvv6cKMend6SkHXmjCSjxK9muqECVTab6hiV5O
5Yj9nsHgxMr1yFZpYs/sZKmJqiKwf87ZiEZNPLnXw2IACXds/PMlHZp4M6/7
es06EZxSaP6hCd3ZIvMPzPOSoaYnIbJamPPlk/bdCSK8nkzzEC3oWv1Yoy8R
wWDTaLMcdS2ocoO8DVliBMbQfEQL++4J3Vfmi/Ho7prYTl0t7D/6MEVXKQSs
BpqXaMG9vdxO7asY2/7b93vqWC18LbnlmXdSjNtWND/RgiA0q00nWQy5oAdr
/SZpwVyQ4S69VYR152meogXWJoPHBV7BuFzy+26ahRYGWUeHLqkEo6dfpbnI
UgvS943ThLsFWDbRWL8OzPzCxiWFXA3CSWeatzD3Z9ueDnNl8GSvc5ThCi30
zf+9xu8+F5bZNH/RwouDlrLvGL4d+yOubvM6LSwIKFs5spOLr2yax2ghML1q
46jrDN4sKlh+aosW6pbu/NgSyUVEIM1ntPBohvnGXQ8Z/Dnbfa3cWwvacQpv
bhkHwfAVzWu0cC3DeHvGhiAE/Z3A1uZr4Zt2bkLogSA8MaP5jRbMRlwpqHFh
8Gn9FqFDuBZulw6d3WYahO27aZ7DrM/xb429hgxe3T7y+cA+LUiFVJf6JgVB
sYbmO1roMhmfGjKfwS+t5wufH9ZCavmXQxtFPFxZSPMe5n1O17KSgwye+fWn
yJ3VwkJWue/AZh5WnKb5jxaqtQOXz5jKw5kX0xQXpWrB+Fz9lxWJPLT02M7d
kqGFcVdepPZOZvSuyXbfsJtaUPR4Gzn9Dh/xa2k+pIXl8R9SDikI8C365Jvc
+1rYkd605upiAabfpHkRsx+HH6x8ay1AdPVr8+6nWvjYt/7FFTMB3qnT/EgL
JTOGB49PEGDcfJkTM0qZ9V/rbb1ZRgiBD82TtBBfk1Mv7SxE0QmL/oDPWjj8
wdeysEII3Wc0X9JC/8q0cTNLhPD64+OW/kML+kmf+mdLhMg1onkTc/6+ZC9/
7i2EyupzhQ2tWhjOfWw5uVyIjZE0f9JCjaPy3nPmwcjIfGc2rk8LN6ZnyLpe
DcZAJc2jtDClpWK+6b9g2KsqxbnJsrBF2HSuIyoY5+bSfIqFY3LZH/oOC/Db
c377GXUWMq74zBJ84mNRIs2rWOgvvl67SVeAw4WcdZ90mftRV9m6zHVtR8ze
Hj0WAj9N7Trcz8dMw0u5/41lYe76qIjrmXzsdqB5FguzbHJ8Pdz5KA/7pL96
EgvfnjnsYXvzYZpB8y0W9Jf53tpQxIfos3r0QQsWOA+zXlpMFuCFEs27WKhe
KyYdEgFGzl5cXwwWaj12brRj5uu7neZfLOSNNyT+TgI8OCK0VVzBgtmGriuu
0gKoF9A8jIVzGc8m75glgOvvq5lW61hQGLg1u+K2ANcNaD7GwtZJEy0VOgWQ
sqtmR25hoSxv3bOE6QKsCqV5GTOfZ+ecv87lI+WKdvADbxazT9Lv/3vFQ2cF
zc9YcDNSPrmmhAdrhWVfennM9/WTuwlhfBybSfM0FpTvicssZwpQv01CZoWz
ILbLrK3/KMDsQzRfY2Fol0rlujFC7Mu/cYG7jwUH245Fv/4I8Kml+EN8HAve
Q2n5YQMCTNCrU8w8zMIZ+41yVVlChNrS/I0F87TBJ3uzgvFKNMKv6QwLTcVq
Iw7tEkE/leZxLEz7cG9KSLkIAR/sSk1SWThEbMwlamLky9J8jgX/nurjf+aK
oTUjeqb7TRYMDGxPl58QY6sbzetYyJc32GR1KAS3DmafOHefBZXM48e9fEMh
+5DmdyzoXXzeo68hwdrmpv4vT1nY4M+e4fNQgksjaJ7HQs+oJhWLXxJ0Lx29
dXgpC9dnvKpR9ZZgqZDmeyzwv7J3r4yX4MTFNU/XfmZhpZzV6ltTwvDzLc37
WIi+MzHajxeGedL7xh/6wezX76zzq/eF4cBUmv+xELa4SGORQhgqNz+Ie93K
QsWU8EHWKgkmx9I8kIXkhid/l52TIPze73blPua+7yUUXw7Dm0aaD7IQ7q6T
J54fjjG6xk5LZNkwXVQyX1QWBq4NzQvZiDgZl3twThgKeM73otXZ6L/oUmHR
LIF2Cs0P2fBzWJV65JgEHqVxBvm6bHx5/CzEekMYsgZTHb/qsVG23M35yLJw
KEwuiP5nyMbrsuejntiGY/1Gmi+y8ca46ca/hDCk7e+unz2JDX/fdhjwJOjL
oXkjGyvXXJwmyAqFbf2EFXwLNoRfwmsetYbitA7NH9no8fhdpPtFgl+Lt1y/
ATY2u9n7L4oKwwIuzSPZeHXJfqbkVhgOnjui3WLLRoPwso3y2jBUv6b5JBsl
Gy6eXS4fhmn9z4LHr2Mjlb277e+XUERNoHklGz8dFtklvw7B2w39X7ZvYebz
a9KsUvsQGO2l+SUbxdkPJ2x6IwY/axpSvNlYLu2ywHSPGE9raZ7JzC9Gx9Hc
Woxh7O0Xq3hsPA96Mct5uRieoPkms37Fep5LmfN2N+Ck0qhwNlw/vzsuNyoE
ymdp3smG9SSNH7zgELi8fO23fh+z/vHbdr2qEiO9ryFJEMfG0LU/YxfqiNFv
KlN25DAbARP53fxcEeycaB7KPH+hqShvpwhJuyxmlZ5ho0/N0vS7phhtt2g+
ykb7/iN2Vs/EwHefk2qpzHwcfa+ueyDGIU2al7LRFrTsFWkXoWbBuYFlN9kI
ycx9wJolgrkfzU/ZcN7s0KHZFoxdp95t3X2fjajt7n1Bo0T48JzmqWzo9H7m
nr0vgkmPYtHjp2xMr/DVzdwmRrAxzVfZuKjS2e39Qozna+ZPGHzD7O+oziTV
ajFGRNO8lQ2p+U6J7CQxfG5wDs77zIZn+8vqA8Fi3K+i+SuznxOOLdpuGwI1
9Usdwh/M93hnDVvsEorNljSPZUNXWua42gwJMr0/Od1uZQOr7/+Ti5Vg6DjN
Z9kYcfrSGn07CRyL1O+39bJxx+T011UNoUjuMm1RH2TGaz4eMexTKDrGLh49
SVYbcZZmJ8bekMBqFc1vtcEZe9HtSGEYjkYId3qpa8PKVGd0THEY6q7RPFcb
bPZ1fXlOGCwqrzZc1NVG+rjvczQCJNirQvNdbcTmPY8udgvFxznVK74baqOG
M09g+yIU4z1p3quNd+sNr88/LkHIMe0b+pO0ca51f31hjQQvn9D8Vxu3NyUG
VAok0OtYquNioY2uPPdb+vdC4T+G5sHa6NX5W8BSCUWevUSUCG3snBAv/6Eh
BJphNB/Wxnct99Xpt0Lhln6j8q2tNha76DzZ7SLBzU80L9bGlZTxwZZdoZBR
qoPmOm0Y//rgbmEfijUWND/Whoopu3PTmxBc9BhxacUWbWzY6fxz64QQ/DlM
82RtPDLZMPXO2hAseWynvM9bGzrRyw4OXQ3B8TZPy8sB2vD86ObUnxyCRv1o
/0KeNjryT97MuRCCuStp3qyNUy9uySxbHYKYkOwyqXBtXMgsS3s+JQRf0mj+
zLxvsu1u1v4QTKpomrVgnzZCrvAvR5uFIkye5tHaSFlo8/c7M98S89GnxIe1
MWr8XVhvCcHobTSf1sbDuKl32bvF4CSsGcw6o42PvNfuxedEeJxH82ptfPY6
8DN0VTDYLXu3dVzWhuMzvZdRVsFwH0Xza23Y1/y976/O8PPlD4qm3NRGz1ep
A2DOu7yI5tnayNhcMR6dDF+//HuC731t/I5Tvf3whAip72m+zazn+9NZ841E
6JUxjk99qo2xy+vvmi0XYfl0mndrI7n97ryHy8Q4tcW5s/aNNioLzfVDmf7T
HEfzb23UNR3xKo8PwfwHcevHfNYGL8WZk2QTgrgmmodrI6pWbt9U3RBUDS+4
v+mHNpQ/TtUb/1CMqUtpPs6s94/AMVbDQhAp6B59slUbdmOPPnhzPgRlF2he
ro0Dsx1WnakPwdi3E3Z96NXG4HcV/q+jIfgfrsagEA==
          "]]}}}, {{}, {}}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     0.3, Axes -> {False, False}, AxesLabel -> {None, None}, 
     AxesOrigin -> {0, 0}, 
     BaseStyle -> {FontSize -> 25, FontFamily -> "Times New Roman"}, 
     DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, 
     FrameLabel -> {{
        FormBox[
         TagBox["\"Force, kN\"", HoldForm], TraditionalForm], 
        FormBox[
         TagBox["\"\"", HoldForm], TraditionalForm]}, {
        FormBox[
         TagBox["\"Time, s\"", HoldForm], TraditionalForm], 
        FormBox[
         TagBox["\"\"", HoldForm], TraditionalForm]}}, FrameStyle -> Directive[
       GrayLevel[0]], 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
       GrayLevel[0.4, 0.5], 
       AbsoluteThickness[1], 
       AbsoluteDashing[{1, 2}]], ImageSize -> 1200, 
     Method -> {
      "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "DefaultMeshStyle" -> AbsolutePointSize[6], "DefaultPlotStyle" -> {
         Directive[
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.528488, 0.470624, 0.701351], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.772079, 0.431554, 0.102387], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.363898, 0.618501, 0.782349], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[1, 0.75, 0], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.647624, 0.37816, 0.614037], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.571589, 0.586483, 0.], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.915, 0.3325, 0.2125], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[
          0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
          AbsoluteThickness[1.6]]}, "DomainPadding" -> Scaled[0.02], 
       "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
       "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0., 9.096400000077818}, {0., 1000.}}, PlotRangeClipping -> 
     True, PlotRangePadding -> {{0, 0}, {0, 0}}, 
     Ticks -> {Automatic, Automatic}}], 
   FormBox[
    TagBox[
     GridBox[{{
        FormBox[
         TemplateBox[{
           StyleBox[
           "\"Simulation\"", 25, FontFamily -> "Times New Roman", 
            StripOnInput -> False]}, "LineLegend", 
          DisplayFunction -> (StyleBox[
            StyleBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  TagBox[
                   GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], FontSize -> 25, FontFamily -> 
                    "Times New Roman", 
                    Thickness[Large], 
                    GrayLevel[0]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], FontSize -> 25, FontFamily -> 
                    "Times New Roman", 
                    Thickness[Large], 
                    GrayLevel[0]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
               "Grid"], Alignment -> Left, AppearanceElements -> None, 
              ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
              "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
            FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
            False]& ), InterpretationFunction :> (RowBox[{"LineLegend", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"PointSize", "[", "0.006944444444444445`", "]"}], 
                    ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    RowBox[{"FontSize", "\[Rule]", "25"}], ",", 
                    RowBox[{"FontFamily", "\[Rule]", "\"Times New Roman\""}], 
                    ",", 
                    RowBox[{"Thickness", "[", "Large", "]"}], ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], "}"}], ",", 
               RowBox[{"{", #, "}"}], ",", 
               RowBox[{"LegendMarkers", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], "}"}]}], ",", 
               
               RowBox[{"Joined", "\[Rule]", 
                 RowBox[{"{", "True", "}"}]}], ",", 
               RowBox[{"LabelStyle", "\[Rule]", 
                 RowBox[{"{", "}"}]}], ",", 
               RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
          Editable -> True], TraditionalForm]}, {
        FormBox[
         TemplateBox[{
           StyleBox[
           "\"Simulation\"", 25, FontFamily -> "Times New Roman", 
            StripOnInput -> False]}, "LineLegend", 
          DisplayFunction -> (StyleBox[
            StyleBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  TagBox[
                   GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], FontSize -> 25, FontFamily -> 
                    "Times New Roman", 
                    Thickness[Large], 
                    RGBColor[1, 0.5, 0]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], FontSize -> 25, FontFamily -> 
                    "Times New Roman", 
                    Thickness[Large], 
                    RGBColor[1, 0.5, 0]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
               "Grid"], Alignment -> Left, AppearanceElements -> None, 
              ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
              "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
            FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
            False]& ), InterpretationFunction :> (RowBox[{"LineLegend", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"PointSize", "[", "0.006944444444444445`", "]"}], 
                    ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    RowBox[{"FontSize", "\[Rule]", "25"}], ",", 
                    RowBox[{"FontFamily", "\[Rule]", "\"Times New Roman\""}], 
                    ",", 
                    RowBox[{"Thickness", "[", "Large", "]"}], ",", 
                    
                    TemplateBox[<|"color" -> RGBColor[1, 0.5, 0]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], "}"}], ",", 
               RowBox[{"{", #, "}"}], ",", 
               RowBox[{"LegendMarkers", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], "}"}]}], ",", 
               
               RowBox[{"Joined", "\[Rule]", 
                 RowBox[{"{", "True", "}"}]}], ",", 
               RowBox[{"LabelStyle", "\[Rule]", 
                 RowBox[{"{", "}"}]}], ",", 
               RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
          Editable -> True], TraditionalForm]}}, 
      GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
      GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
      GridBoxSpacings -> {"Columns" -> {{0}}}], "Grid"], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.9244438255737667`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"9b7b8b75-d463-4e48-a38e-4ae213531d33"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"index", "=", "1"}], ",", 
   RowBox[{"index", "<", 
    RowBox[{"Length", "[", "tval", "]"}]}], ",", 
   RowBox[{"index", "++"}], ",", 
   RowBox[{
    RowBox[{"forceplot2", "=", 
     RowBox[{"ListLinePlot", "[", 
      RowBox[{
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"tval", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "index"}], "]"}], "]"}], ",", 
          RowBox[{"fval", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "index"}], "]"}], "]"}]}], "}"}], "]"}], ",", 
       RowBox[{"PlotTheme", "->", "\"\<Detailed\>\""}], ",", 
       RowBox[{"AspectRatio", "->", "0.3"}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "1200"}], ",", 
       RowBox[{"FrameLabel", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<Force, kN\>\"", ",", "\"\<\>\""}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Time, s\>\"", ",", "\"\<\>\""}], "}"}]}], "}"}]}], 
       ",", 
       RowBox[{"PlotStyle", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"Thick", ",", "Orange"}], "}"}], "}"}]}], ",", 
       RowBox[{"BaseStyle", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"FontSize", "\[Rule]", "25"}], ",", 
          RowBox[{"FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}]}], 
         "}"}]}], ",", 
       RowBox[{"FrameStyle", "\[Rule]", 
        RowBox[{"Directive", "[", "Black", "]"}]}], ",", 
       RowBox[{"PlotRange", "->", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{
             RowBox[{"tval", "[", 
              RowBox[{"[", 
               RowBox[{"-", "1"}], "]"}], "]"}], "+", "0.1"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1000"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"PlotLegends", "->", "None"}]}], "]"}]}], ";", 
    RowBox[{"resultplot", "=", 
     RowBox[{"Show", "[", 
      RowBox[{"forceplot", ",", "forceplot2"}], "]"}]}], ";", 
    RowBox[{"Export", "[", 
     RowBox[{
      RowBox[{"\"\<force_\>\"", "<>", 
       RowBox[{"ToString", "[", "index", "]"}], "<>", "\"\<.png\>\""}], ",", 
      "resultplot"}], "]"}], ";"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9244439312747803`*^9, 3.924444053772897*^9}, {
  3.924444090221387*^9, 3.9244440906405888`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"e928bf99-432b-4aee-982a-b135aa210e9d"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.924443968743311*^9, 
  3.9244439918117657`*^9}},ExpressionUUID->"d0a08098-d865-4823-980a-\
46a0688e10dc"]
},
WindowSize->{1395, 762},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{
             LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
FrontEndVersion->"13.2 for Linux x86 (64-bit) (January 30, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"9e86a8b8-fb25-4d60-8d75-3e3e7a0acc08"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 251, 4, 29, "Input",ExpressionUUID->"801d992a-ff19-474f-82cd-46c4f3cc9276"],
Cell[834, 28, 686, 10, 36, "Output",ExpressionUUID->"3e974061-8a74-430f-b14e-51b2ead15099"]
}, Open  ]],
Cell[1535, 41, 649, 12, 32, "Input",ExpressionUUID->"1d6d3aea-c858-4b86-a3ca-4d1266bbeeaf"],
Cell[2187, 55, 487, 11, 29, "Input",ExpressionUUID->"a22424fa-d059-4872-a744-79ddb66826c3"],
Cell[2677, 68, 573, 14, 29, "Input",ExpressionUUID->"fc127fd4-06f6-43c5-8482-5e4f4c926d05"],
Cell[CellGroupData[{
Cell[3275, 86, 229, 4, 29, "Input",ExpressionUUID->"3e43b203-93c9-447b-8765-cdb00402c445"],
Cell[3507, 92, 459, 6, 33, "Output",ExpressionUUID->"cc9e0b46-8aa1-4e03-a5b4-54ba651a55bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4003, 103, 2055, 48, 78, "Input",ExpressionUUID->"491329a2-6083-4179-ae3a-e0367c0409f0"],
Cell[6061, 153, 39783, 693, 442, "Output",ExpressionUUID->"becff4db-c91e-4984-bd65-833fe553d150"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45881, 851, 255, 4, 29, "Input",ExpressionUUID->"a3088624-ebb3-4d36-a285-14b06735080e"],
Cell[46139, 857, 405, 5, 33, "Output",ExpressionUUID->"0419df98-a238-4023-929b-3cf56d4bd4c7"]
}, Open  ]],
Cell[46559, 865, 219, 4, 29, "Input",ExpressionUUID->"c79d891a-09ec-475d-8b89-1bed6763a73e"],
Cell[CellGroupData[{
Cell[46803, 873, 1857, 49, 77, "Input",ExpressionUUID->"1f50ca6e-b729-46c9-b90f-2da37568c276"],
Cell[48663, 924, 23427, 426, 442, "Output",ExpressionUUID->"b8a71ec2-2b64-4de2-ac41-cd04d6ba96aa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[72127, 1355, 275, 5, 29, "Input",ExpressionUUID->"e775d568-5e39-49a7-8b47-ace92f6b2d43"],
Cell[72405, 1362, 68372, 1203, 445, "Output",ExpressionUUID->"9b7b8b75-d463-4e48-a38e-4ae213531d33"]
}, Open  ]],
Cell[140792, 2568, 2533, 65, 199, "Input",ExpressionUUID->"e928bf99-432b-4aee-982a-b135aa210e9d"],
Cell[143328, 2635, 154, 3, 29, "Input",ExpressionUUID->"d0a08098-d865-4823-980a-46a0688e10dc"]
}
]
*)

